<?php
namespace Aws\DatabaseMigrationService;

use Aws\AwsClient;
use Aws\Result;
use GuzzleHttp\Promise\Promise;

/**
 * This client is used to interact with the **AWS Database Migration Service** service.
 * @method Result addTagsToResource(array $args = [])
 * @method Promise addTagsToResourceAsync(array $args = [])
 * @method Result applyPendingMaintenanceAction(array $args = [])
 * @method Promise applyPendingMaintenanceActionAsync(array $args = [])
 * @method Result batchStartRecommendations(array $args = [])
 * @method Promise batchStartRecommendationsAsync(array $args = [])
 * @method Result cancelReplicationTaskAssessmentRun(array $args = [])
 * @method Promise cancelReplicationTaskAssessmentRunAsync(array $args = [])
 * @method Result createDataProvider(array $args = [])
 * @method Promise createDataProviderAsync(array $args = [])
 * @method Result createEndpoint(array $args = [])
 * @method Promise createEndpointAsync(array $args = [])
 * @method Result createEventSubscription(array $args = [])
 * @method Promise createEventSubscriptionAsync(array $args = [])
 * @method Result createFleetAdvisorCollector(array $args = [])
 * @method Promise createFleetAdvisorCollectorAsync(array $args = [])
 * @method Result createInstanceProfile(array $args = [])
 * @method Promise createInstanceProfileAsync(array $args = [])
 * @method Result createMigrationProject(array $args = [])
 * @method Promise createMigrationProjectAsync(array $args = [])
 * @method Result createReplicationConfig(array $args = [])
 * @method Promise createReplicationConfigAsync(array $args = [])
 * @method Result createReplicationInstance(array $args = [])
 * @method Promise createReplicationInstanceAsync(array $args = [])
 * @method Result createReplicationSubnetGroup(array $args = [])
 * @method Promise createReplicationSubnetGroupAsync(array $args = [])
 * @method Result createReplicationTask(array $args = [])
 * @method Promise createReplicationTaskAsync(array $args = [])
 * @method Result deleteCertificate(array $args = [])
 * @method Promise deleteCertificateAsync(array $args = [])
 * @method Result deleteConnection(array $args = [])
 * @method Promise deleteConnectionAsync(array $args = [])
 * @method Result deleteDataProvider(array $args = [])
 * @method Promise deleteDataProviderAsync(array $args = [])
 * @method Result deleteEndpoint(array $args = [])
 * @method Promise deleteEndpointAsync(array $args = [])
 * @method Result deleteEventSubscription(array $args = [])
 * @method Promise deleteEventSubscriptionAsync(array $args = [])
 * @method Result deleteFleetAdvisorCollector(array $args = [])
 * @method Promise deleteFleetAdvisorCollectorAsync(array $args = [])
 * @method Result deleteFleetAdvisorDatabases(array $args = [])
 * @method Promise deleteFleetAdvisorDatabasesAsync(array $args = [])
 * @method Result deleteInstanceProfile(array $args = [])
 * @method Promise deleteInstanceProfileAsync(array $args = [])
 * @method Result deleteMigrationProject(array $args = [])
 * @method Promise deleteMigrationProjectAsync(array $args = [])
 * @method Result deleteReplicationConfig(array $args = [])
 * @method Promise deleteReplicationConfigAsync(array $args = [])
 * @method Result deleteReplicationInstance(array $args = [])
 * @method Promise deleteReplicationInstanceAsync(array $args = [])
 * @method Result deleteReplicationSubnetGroup(array $args = [])
 * @method Promise deleteReplicationSubnetGroupAsync(array $args = [])
 * @method Result deleteReplicationTask(array $args = [])
 * @method Promise deleteReplicationTaskAsync(array $args = [])
 * @method Result deleteReplicationTaskAssessmentRun(array $args = [])
 * @method Promise deleteReplicationTaskAssessmentRunAsync(array $args = [])
 * @method Result describeAccountAttributes(array $args = [])
 * @method Promise describeAccountAttributesAsync(array $args = [])
 * @method Result describeApplicableIndividualAssessments(array $args = [])
 * @method Promise describeApplicableIndividualAssessmentsAsync(array $args = [])
 * @method Result describeCertificates(array $args = [])
 * @method Promise describeCertificatesAsync(array $args = [])
 * @method Result describeConnections(array $args = [])
 * @method Promise describeConnectionsAsync(array $args = [])
 * @method Result describeConversionConfiguration(array $args = [])
 * @method Promise describeConversionConfigurationAsync(array $args = [])
 * @method Result describeDataProviders(array $args = [])
 * @method Promise describeDataProvidersAsync(array $args = [])
 * @method Result describeEndpointSettings(array $args = [])
 * @method Promise describeEndpointSettingsAsync(array $args = [])
 * @method Result describeEndpointTypes(array $args = [])
 * @method Promise describeEndpointTypesAsync(array $args = [])
 * @method Result describeEndpoints(array $args = [])
 * @method Promise describeEndpointsAsync(array $args = [])
 * @method Result describeEngineVersions(array $args = [])
 * @method Promise describeEngineVersionsAsync(array $args = [])
 * @method Result describeEventCategories(array $args = [])
 * @method Promise describeEventCategoriesAsync(array $args = [])
 * @method Result describeEventSubscriptions(array $args = [])
 * @method Promise describeEventSubscriptionsAsync(array $args = [])
 * @method Result describeEvents(array $args = [])
 * @method Promise describeEventsAsync(array $args = [])
 * @method Result describeExtensionPackAssociations(array $args = [])
 * @method Promise describeExtensionPackAssociationsAsync(array $args = [])
 * @method Result describeFleetAdvisorCollectors(array $args = [])
 * @method Promise describeFleetAdvisorCollectorsAsync(array $args = [])
 * @method Result describeFleetAdvisorDatabases(array $args = [])
 * @method Promise describeFleetAdvisorDatabasesAsync(array $args = [])
 * @method Result describeFleetAdvisorLsaAnalysis(array $args = [])
 * @method Promise describeFleetAdvisorLsaAnalysisAsync(array $args = [])
 * @method Result describeFleetAdvisorSchemaObjectSummary(array $args = [])
 * @method Promise describeFleetAdvisorSchemaObjectSummaryAsync(array $args = [])
 * @method Result describeFleetAdvisorSchemas(array $args = [])
 * @method Promise describeFleetAdvisorSchemasAsync(array $args = [])
 * @method Result describeInstanceProfiles(array $args = [])
 * @method Promise describeInstanceProfilesAsync(array $args = [])
 * @method Result describeMetadataModelAssessments(array $args = [])
 * @method Promise describeMetadataModelAssessmentsAsync(array $args = [])
 * @method Result describeMetadataModelConversions(array $args = [])
 * @method Promise describeMetadataModelConversionsAsync(array $args = [])
 * @method Result describeMetadataModelExportsAsScript(array $args = [])
 * @method Promise describeMetadataModelExportsAsScriptAsync(array $args = [])
 * @method Result describeMetadataModelExportsToTarget(array $args = [])
 * @method Promise describeMetadataModelExportsToTargetAsync(array $args = [])
 * @method Result describeMetadataModelImports(array $args = [])
 * @method Promise describeMetadataModelImportsAsync(array $args = [])
 * @method Result describeMigrationProjects(array $args = [])
 * @method Promise describeMigrationProjectsAsync(array $args = [])
 * @method Result describeOrderableReplicationInstances(array $args = [])
 * @method Promise describeOrderableReplicationInstancesAsync(array $args = [])
 * @method Result describePendingMaintenanceActions(array $args = [])
 * @method Promise describePendingMaintenanceActionsAsync(array $args = [])
 * @method Result describeRecommendationLimitations(array $args = [])
 * @method Promise describeRecommendationLimitationsAsync(array $args = [])
 * @method Result describeRecommendations(array $args = [])
 * @method Promise describeRecommendationsAsync(array $args = [])
 * @method Result describeRefreshSchemasStatus(array $args = [])
 * @method Promise describeRefreshSchemasStatusAsync(array $args = [])
 * @method Result describeReplicationConfigs(array $args = [])
 * @method Promise describeReplicationConfigsAsync(array $args = [])
 * @method Result describeReplicationInstanceTaskLogs(array $args = [])
 * @method Promise describeReplicationInstanceTaskLogsAsync(array $args = [])
 * @method Result describeReplicationInstances(array $args = [])
 * @method Promise describeReplicationInstancesAsync(array $args = [])
 * @method Result describeReplicationSubnetGroups(array $args = [])
 * @method Promise describeReplicationSubnetGroupsAsync(array $args = [])
 * @method Result describeReplicationTableStatistics(array $args = [])
 * @method Promise describeReplicationTableStatisticsAsync(array $args = [])
 * @method Result describeReplicationTaskAssessmentResults(array $args = [])
 * @method Promise describeReplicationTaskAssessmentResultsAsync(array $args = [])
 * @method Result describeReplicationTaskAssessmentRuns(array $args = [])
 * @method Promise describeReplicationTaskAssessmentRunsAsync(array $args = [])
 * @method Result describeReplicationTaskIndividualAssessments(array $args = [])
 * @method Promise describeReplicationTaskIndividualAssessmentsAsync(array $args = [])
 * @method Result describeReplicationTasks(array $args = [])
 * @method Promise describeReplicationTasksAsync(array $args = [])
 * @method Result describeReplications(array $args = [])
 * @method Promise describeReplicationsAsync(array $args = [])
 * @method Result describeSchemas(array $args = [])
 * @method Promise describeSchemasAsync(array $args = [])
 * @method Result describeTableStatistics(array $args = [])
 * @method Promise describeTableStatisticsAsync(array $args = [])
 * @method Result exportMetadataModelAssessment(array $args = [])
 * @method Promise exportMetadataModelAssessmentAsync(array $args = [])
 * @method Result importCertificate(array $args = [])
 * @method Promise importCertificateAsync(array $args = [])
 * @method Result listTagsForResource(array $args = [])
 * @method Promise listTagsForResourceAsync(array $args = [])
 * @method Result modifyConversionConfiguration(array $args = [])
 * @method Promise modifyConversionConfigurationAsync(array $args = [])
 * @method Result modifyDataProvider(array $args = [])
 * @method Promise modifyDataProviderAsync(array $args = [])
 * @method Result modifyEndpoint(array $args = [])
 * @method Promise modifyEndpointAsync(array $args = [])
 * @method Result modifyEventSubscription(array $args = [])
 * @method Promise modifyEventSubscriptionAsync(array $args = [])
 * @method Result modifyInstanceProfile(array $args = [])
 * @method Promise modifyInstanceProfileAsync(array $args = [])
 * @method Result modifyMigrationProject(array $args = [])
 * @method Promise modifyMigrationProjectAsync(array $args = [])
 * @method Result modifyReplicationConfig(array $args = [])
 * @method Promise modifyReplicationConfigAsync(array $args = [])
 * @method Result modifyReplicationInstance(array $args = [])
 * @method Promise modifyReplicationInstanceAsync(array $args = [])
 * @method Result modifyReplicationSubnetGroup(array $args = [])
 * @method Promise modifyReplicationSubnetGroupAsync(array $args = [])
 * @method Result modifyReplicationTask(array $args = [])
 * @method Promise modifyReplicationTaskAsync(array $args = [])
 * @method Result moveReplicationTask(array $args = [])
 * @method Promise moveReplicationTaskAsync(array $args = [])
 * @method Result rebootReplicationInstance(array $args = [])
 * @method Promise rebootReplicationInstanceAsync(array $args = [])
 * @method Result refreshSchemas(array $args = [])
 * @method Promise refreshSchemasAsync(array $args = [])
 * @method Result reloadReplicationTables(array $args = [])
 * @method Promise reloadReplicationTablesAsync(array $args = [])
 * @method Result reloadTables(array $args = [])
 * @method Promise reloadTablesAsync(array $args = [])
 * @method Result removeTagsFromResource(array $args = [])
 * @method Promise removeTagsFromResourceAsync(array $args = [])
 * @method Result runFleetAdvisorLsaAnalysis(array $args = [])
 * @method Promise runFleetAdvisorLsaAnalysisAsync(array $args = [])
 * @method Result startExtensionPackAssociation(array $args = [])
 * @method Promise startExtensionPackAssociationAsync(array $args = [])
 * @method Result startMetadataModelAssessment(array $args = [])
 * @method Promise startMetadataModelAssessmentAsync(array $args = [])
 * @method Result startMetadataModelConversion(array $args = [])
 * @method Promise startMetadataModelConversionAsync(array $args = [])
 * @method Result startMetadataModelExportAsScript(array $args = [])
 * @method Promise startMetadataModelExportAsScriptAsync(array $args = [])
 * @method Result startMetadataModelExportToTarget(array $args = [])
 * @method Promise startMetadataModelExportToTargetAsync(array $args = [])
 * @method Result startMetadataModelImport(array $args = [])
 * @method Promise startMetadataModelImportAsync(array $args = [])
 * @method Result startRecommendations(array $args = [])
 * @method Promise startRecommendationsAsync(array $args = [])
 * @method Result startReplication(array $args = [])
 * @method Promise startReplicationAsync(array $args = [])
 * @method Result startReplicationTask(array $args = [])
 * @method Promise startReplicationTaskAsync(array $args = [])
 * @method Result startReplicationTaskAssessment(array $args = [])
 * @method Promise startReplicationTaskAssessmentAsync(array $args = [])
 * @method Result startReplicationTaskAssessmentRun(array $args = [])
 * @method Promise startReplicationTaskAssessmentRunAsync(array $args = [])
 * @method Result stopReplication(array $args = [])
 * @method Promise stopReplicationAsync(array $args = [])
 * @method Result stopReplicationTask(array $args = [])
 * @method Promise stopReplicationTaskAsync(array $args = [])
 * @method Result testConnection(array $args = [])
 * @method Promise testConnectionAsync(array $args = [])
 * @method Result updateSubscriptionsToEventBridge(array $args = [])
 * @method Promise updateSubscriptionsToEventBridgeAsync(array $args = [])
 */
class DatabaseMigrationServiceClient extends AwsClient {}
