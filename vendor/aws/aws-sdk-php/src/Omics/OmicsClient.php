<?php
namespace Aws\Omics;

use Aws\AwsClient;
use Aws\Result;
use GuzzleHttp\Promise\Promise;

/**
 * This client is used to interact with the **Amazon Omics** service.
 * @method Result abortMultipartReadSetUpload(array $args = [])
 * @method Promise abortMultipartReadSetUploadAsync(array $args = [])
 * @method Result acceptShare(array $args = [])
 * @method Promise acceptShareAsync(array $args = [])
 * @method Result batchDeleteReadSet(array $args = [])
 * @method Promise batchDeleteReadSetAsync(array $args = [])
 * @method Result cancelAnnotationImportJob(array $args = [])
 * @method Promise cancelAnnotationImportJobAsync(array $args = [])
 * @method Result cancelRun(array $args = [])
 * @method Promise cancelRunAsync(array $args = [])
 * @method Result cancelVariantImportJob(array $args = [])
 * @method Promise cancelVariantImportJobAsync(array $args = [])
 * @method Result completeMultipartReadSetUpload(array $args = [])
 * @method Promise completeMultipartReadSetUploadAsync(array $args = [])
 * @method Result createAnnotationStore(array $args = [])
 * @method Promise createAnnotationStoreAsync(array $args = [])
 * @method Result createAnnotationStoreVersion(array $args = [])
 * @method Promise createAnnotationStoreVersionAsync(array $args = [])
 * @method Result createMultipartReadSetUpload(array $args = [])
 * @method Promise createMultipartReadSetUploadAsync(array $args = [])
 * @method Result createReferenceStore(array $args = [])
 * @method Promise createReferenceStoreAsync(array $args = [])
 * @method Result createRunGroup(array $args = [])
 * @method Promise createRunGroupAsync(array $args = [])
 * @method Result createSequenceStore(array $args = [])
 * @method Promise createSequenceStoreAsync(array $args = [])
 * @method Result createShare(array $args = [])
 * @method Promise createShareAsync(array $args = [])
 * @method Result createVariantStore(array $args = [])
 * @method Promise createVariantStoreAsync(array $args = [])
 * @method Result createWorkflow(array $args = [])
 * @method Promise createWorkflowAsync(array $args = [])
 * @method Result deleteAnnotationStore(array $args = [])
 * @method Promise deleteAnnotationStoreAsync(array $args = [])
 * @method Result deleteAnnotationStoreVersions(array $args = [])
 * @method Promise deleteAnnotationStoreVersionsAsync(array $args = [])
 * @method Result deleteReference(array $args = [])
 * @method Promise deleteReferenceAsync(array $args = [])
 * @method Result deleteReferenceStore(array $args = [])
 * @method Promise deleteReferenceStoreAsync(array $args = [])
 * @method Result deleteRun(array $args = [])
 * @method Promise deleteRunAsync(array $args = [])
 * @method Result deleteRunGroup(array $args = [])
 * @method Promise deleteRunGroupAsync(array $args = [])
 * @method Result deleteSequenceStore(array $args = [])
 * @method Promise deleteSequenceStoreAsync(array $args = [])
 * @method Result deleteShare(array $args = [])
 * @method Promise deleteShareAsync(array $args = [])
 * @method Result deleteVariantStore(array $args = [])
 * @method Promise deleteVariantStoreAsync(array $args = [])
 * @method Result deleteWorkflow(array $args = [])
 * @method Promise deleteWorkflowAsync(array $args = [])
 * @method Result getAnnotationImportJob(array $args = [])
 * @method Promise getAnnotationImportJobAsync(array $args = [])
 * @method Result getAnnotationStore(array $args = [])
 * @method Promise getAnnotationStoreAsync(array $args = [])
 * @method Result getAnnotationStoreVersion(array $args = [])
 * @method Promise getAnnotationStoreVersionAsync(array $args = [])
 * @method Result getReadSet(array $args = [])
 * @method Promise getReadSetAsync(array $args = [])
 * @method Result getReadSetActivationJob(array $args = [])
 * @method Promise getReadSetActivationJobAsync(array $args = [])
 * @method Result getReadSetExportJob(array $args = [])
 * @method Promise getReadSetExportJobAsync(array $args = [])
 * @method Result getReadSetImportJob(array $args = [])
 * @method Promise getReadSetImportJobAsync(array $args = [])
 * @method Result getReadSetMetadata(array $args = [])
 * @method Promise getReadSetMetadataAsync(array $args = [])
 * @method Result getReference(array $args = [])
 * @method Promise getReferenceAsync(array $args = [])
 * @method Result getReferenceImportJob(array $args = [])
 * @method Promise getReferenceImportJobAsync(array $args = [])
 * @method Result getReferenceMetadata(array $args = [])
 * @method Promise getReferenceMetadataAsync(array $args = [])
 * @method Result getReferenceStore(array $args = [])
 * @method Promise getReferenceStoreAsync(array $args = [])
 * @method Result getRun(array $args = [])
 * @method Promise getRunAsync(array $args = [])
 * @method Result getRunGroup(array $args = [])
 * @method Promise getRunGroupAsync(array $args = [])
 * @method Result getRunTask(array $args = [])
 * @method Promise getRunTaskAsync(array $args = [])
 * @method Result getSequenceStore(array $args = [])
 * @method Promise getSequenceStoreAsync(array $args = [])
 * @method Result getShare(array $args = [])
 * @method Promise getShareAsync(array $args = [])
 * @method Result getVariantImportJob(array $args = [])
 * @method Promise getVariantImportJobAsync(array $args = [])
 * @method Result getVariantStore(array $args = [])
 * @method Promise getVariantStoreAsync(array $args = [])
 * @method Result getWorkflow(array $args = [])
 * @method Promise getWorkflowAsync(array $args = [])
 * @method Result listAnnotationImportJobs(array $args = [])
 * @method Promise listAnnotationImportJobsAsync(array $args = [])
 * @method Result listAnnotationStoreVersions(array $args = [])
 * @method Promise listAnnotationStoreVersionsAsync(array $args = [])
 * @method Result listAnnotationStores(array $args = [])
 * @method Promise listAnnotationStoresAsync(array $args = [])
 * @method Result listMultipartReadSetUploads(array $args = [])
 * @method Promise listMultipartReadSetUploadsAsync(array $args = [])
 * @method Result listReadSetActivationJobs(array $args = [])
 * @method Promise listReadSetActivationJobsAsync(array $args = [])
 * @method Result listReadSetExportJobs(array $args = [])
 * @method Promise listReadSetExportJobsAsync(array $args = [])
 * @method Result listReadSetImportJobs(array $args = [])
 * @method Promise listReadSetImportJobsAsync(array $args = [])
 * @method Result listReadSetUploadParts(array $args = [])
 * @method Promise listReadSetUploadPartsAsync(array $args = [])
 * @method Result listReadSets(array $args = [])
 * @method Promise listReadSetsAsync(array $args = [])
 * @method Result listReferenceImportJobs(array $args = [])
 * @method Promise listReferenceImportJobsAsync(array $args = [])
 * @method Result listReferenceStores(array $args = [])
 * @method Promise listReferenceStoresAsync(array $args = [])
 * @method Result listReferences(array $args = [])
 * @method Promise listReferencesAsync(array $args = [])
 * @method Result listRunGroups(array $args = [])
 * @method Promise listRunGroupsAsync(array $args = [])
 * @method Result listRunTasks(array $args = [])
 * @method Promise listRunTasksAsync(array $args = [])
 * @method Result listRuns(array $args = [])
 * @method Promise listRunsAsync(array $args = [])
 * @method Result listSequenceStores(array $args = [])
 * @method Promise listSequenceStoresAsync(array $args = [])
 * @method Result listShares(array $args = [])
 * @method Promise listSharesAsync(array $args = [])
 * @method Result listTagsForResource(array $args = [])
 * @method Promise listTagsForResourceAsync(array $args = [])
 * @method Result listVariantImportJobs(array $args = [])
 * @method Promise listVariantImportJobsAsync(array $args = [])
 * @method Result listVariantStores(array $args = [])
 * @method Promise listVariantStoresAsync(array $args = [])
 * @method Result listWorkflows(array $args = [])
 * @method Promise listWorkflowsAsync(array $args = [])
 * @method Result startAnnotationImportJob(array $args = [])
 * @method Promise startAnnotationImportJobAsync(array $args = [])
 * @method Result startReadSetActivationJob(array $args = [])
 * @method Promise startReadSetActivationJobAsync(array $args = [])
 * @method Result startReadSetExportJob(array $args = [])
 * @method Promise startReadSetExportJobAsync(array $args = [])
 * @method Result startReadSetImportJob(array $args = [])
 * @method Promise startReadSetImportJobAsync(array $args = [])
 * @method Result startReferenceImportJob(array $args = [])
 * @method Promise startReferenceImportJobAsync(array $args = [])
 * @method Result startRun(array $args = [])
 * @method Promise startRunAsync(array $args = [])
 * @method Result startVariantImportJob(array $args = [])
 * @method Promise startVariantImportJobAsync(array $args = [])
 * @method Result tagResource(array $args = [])
 * @method Promise tagResourceAsync(array $args = [])
 * @method Result untagResource(array $args = [])
 * @method Promise untagResourceAsync(array $args = [])
 * @method Result updateAnnotationStore(array $args = [])
 * @method Promise updateAnnotationStoreAsync(array $args = [])
 * @method Result updateAnnotationStoreVersion(array $args = [])
 * @method Promise updateAnnotationStoreVersionAsync(array $args = [])
 * @method Result updateRunGroup(array $args = [])
 * @method Promise updateRunGroupAsync(array $args = [])
 * @method Result updateVariantStore(array $args = [])
 * @method Promise updateVariantStoreAsync(array $args = [])
 * @method Result updateWorkflow(array $args = [])
 * @method Promise updateWorkflowAsync(array $args = [])
 * @method Result uploadReadSetPart(array $args = [])
 * @method Promise uploadReadSetPartAsync(array $args = [])
 */
class OmicsClient extends AwsClient {}
