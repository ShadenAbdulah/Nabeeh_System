<?php
namespace Aws\ApplicationInsights;

use Aws\AwsClient;
use Aws\Result;
use GuzzleHttp\Promise\Promise;

/**
 * This client is used to interact with the **Amazon CloudWatch Application Insights** service.
 * @method Result addWorkload(array $args = [])
 * @method Promise addWorkloadAsync(array $args = [])
 * @method Result createApplication(array $args = [])
 * @method Promise createApplicationAsync(array $args = [])
 * @method Result createComponent(array $args = [])
 * @method Promise createComponentAsync(array $args = [])
 * @method Result createLogPattern(array $args = [])
 * @method Promise createLogPatternAsync(array $args = [])
 * @method Result deleteApplication(array $args = [])
 * @method Promise deleteApplicationAsync(array $args = [])
 * @method Result deleteComponent(array $args = [])
 * @method Promise deleteComponentAsync(array $args = [])
 * @method Result deleteLogPattern(array $args = [])
 * @method Promise deleteLogPatternAsync(array $args = [])
 * @method Result describeApplication(array $args = [])
 * @method Promise describeApplicationAsync(array $args = [])
 * @method Result describeComponent(array $args = [])
 * @method Promise describeComponentAsync(array $args = [])
 * @method Result describeComponentConfiguration(array $args = [])
 * @method Promise describeComponentConfigurationAsync(array $args = [])
 * @method Result describeComponentConfigurationRecommendation(array $args = [])
 * @method Promise describeComponentConfigurationRecommendationAsync(array $args = [])
 * @method Result describeLogPattern(array $args = [])
 * @method Promise describeLogPatternAsync(array $args = [])
 * @method Result describeObservation(array $args = [])
 * @method Promise describeObservationAsync(array $args = [])
 * @method Result describeProblem(array $args = [])
 * @method Promise describeProblemAsync(array $args = [])
 * @method Result describeProblemObservations(array $args = [])
 * @method Promise describeProblemObservationsAsync(array $args = [])
 * @method Result describeWorkload(array $args = [])
 * @method Promise describeWorkloadAsync(array $args = [])
 * @method Result listApplications(array $args = [])
 * @method Promise listApplicationsAsync(array $args = [])
 * @method Result listComponents(array $args = [])
 * @method Promise listComponentsAsync(array $args = [])
 * @method Result listConfigurationHistory(array $args = [])
 * @method Promise listConfigurationHistoryAsync(array $args = [])
 * @method Result listLogPatternSets(array $args = [])
 * @method Promise listLogPatternSetsAsync(array $args = [])
 * @method Result listLogPatterns(array $args = [])
 * @method Promise listLogPatternsAsync(array $args = [])
 * @method Result listProblems(array $args = [])
 * @method Promise listProblemsAsync(array $args = [])
 * @method Result listTagsForResource(array $args = [])
 * @method Promise listTagsForResourceAsync(array $args = [])
 * @method Result listWorkloads(array $args = [])
 * @method Promise listWorkloadsAsync(array $args = [])
 * @method Result removeWorkload(array $args = [])
 * @method Promise removeWorkloadAsync(array $args = [])
 * @method Result tagResource(array $args = [])
 * @method Promise tagResourceAsync(array $args = [])
 * @method Result untagResource(array $args = [])
 * @method Promise untagResourceAsync(array $args = [])
 * @method Result updateApplication(array $args = [])
 * @method Promise updateApplicationAsync(array $args = [])
 * @method Result updateComponent(array $args = [])
 * @method Promise updateComponentAsync(array $args = [])
 * @method Result updateComponentConfiguration(array $args = [])
 * @method Promise updateComponentConfigurationAsync(array $args = [])
 * @method Result updateLogPattern(array $args = [])
 * @method Promise updateLogPatternAsync(array $args = [])
 * @method Result updateProblem(array $args = [])
 * @method Promise updateProblemAsync(array $args = [])
 * @method Result updateWorkload(array $args = [])
 * @method Promise updateWorkloadAsync(array $args = [])
 */
class ApplicationInsightsClient extends AwsClient {}
