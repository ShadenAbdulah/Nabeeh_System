<?php
namespace Aws\Athena;

use Aws\AwsClient;
use Aws\Result;
use GuzzleHttp\Promise\Promise;

/**
 * This client is used to interact with the **Amazon Athena** service.
 * @method Result batchGetNamedQuery(array $args = [])
 * @method Promise batchGetNamedQueryAsync(array $args = [])
 * @method Result batchGetPreparedStatement(array $args = [])
 * @method Promise batchGetPreparedStatementAsync(array $args = [])
 * @method Result batchGetQueryExecution(array $args = [])
 * @method Promise batchGetQueryExecutionAsync(array $args = [])
 * @method Result cancelCapacityReservation(array $args = [])
 * @method Promise cancelCapacityReservationAsync(array $args = [])
 * @method Result createCapacityReservation(array $args = [])
 * @method Promise createCapacityReservationAsync(array $args = [])
 * @method Result createDataCatalog(array $args = [])
 * @method Promise createDataCatalogAsync(array $args = [])
 * @method Result createNamedQuery(array $args = [])
 * @method Promise createNamedQueryAsync(array $args = [])
 * @method Result createNotebook(array $args = [])
 * @method Promise createNotebookAsync(array $args = [])
 * @method Result createPreparedStatement(array $args = [])
 * @method Promise createPreparedStatementAsync(array $args = [])
 * @method Result createPresignedNotebookUrl(array $args = [])
 * @method Promise createPresignedNotebookUrlAsync(array $args = [])
 * @method Result createWorkGroup(array $args = [])
 * @method Promise createWorkGroupAsync(array $args = [])
 * @method Result deleteCapacityReservation(array $args = [])
 * @method Promise deleteCapacityReservationAsync(array $args = [])
 * @method Result deleteDataCatalog(array $args = [])
 * @method Promise deleteDataCatalogAsync(array $args = [])
 * @method Result deleteNamedQuery(array $args = [])
 * @method Promise deleteNamedQueryAsync(array $args = [])
 * @method Result deleteNotebook(array $args = [])
 * @method Promise deleteNotebookAsync(array $args = [])
 * @method Result deletePreparedStatement(array $args = [])
 * @method Promise deletePreparedStatementAsync(array $args = [])
 * @method Result deleteWorkGroup(array $args = [])
 * @method Promise deleteWorkGroupAsync(array $args = [])
 * @method Result exportNotebook(array $args = [])
 * @method Promise exportNotebookAsync(array $args = [])
 * @method Result getCalculationExecution(array $args = [])
 * @method Promise getCalculationExecutionAsync(array $args = [])
 * @method Result getCalculationExecutionCode(array $args = [])
 * @method Promise getCalculationExecutionCodeAsync(array $args = [])
 * @method Result getCalculationExecutionStatus(array $args = [])
 * @method Promise getCalculationExecutionStatusAsync(array $args = [])
 * @method Result getCapacityAssignmentConfiguration(array $args = [])
 * @method Promise getCapacityAssignmentConfigurationAsync(array $args = [])
 * @method Result getCapacityReservation(array $args = [])
 * @method Promise getCapacityReservationAsync(array $args = [])
 * @method Result getDataCatalog(array $args = [])
 * @method Promise getDataCatalogAsync(array $args = [])
 * @method Result getDatabase(array $args = [])
 * @method Promise getDatabaseAsync(array $args = [])
 * @method Result getNamedQuery(array $args = [])
 * @method Promise getNamedQueryAsync(array $args = [])
 * @method Result getNotebookMetadata(array $args = [])
 * @method Promise getNotebookMetadataAsync(array $args = [])
 * @method Result getPreparedStatement(array $args = [])
 * @method Promise getPreparedStatementAsync(array $args = [])
 * @method Result getQueryExecution(array $args = [])
 * @method Promise getQueryExecutionAsync(array $args = [])
 * @method Result getQueryResults(array $args = [])
 * @method Promise getQueryResultsAsync(array $args = [])
 * @method Result getQueryRuntimeStatistics(array $args = [])
 * @method Promise getQueryRuntimeStatisticsAsync(array $args = [])
 * @method Result getSession(array $args = [])
 * @method Promise getSessionAsync(array $args = [])
 * @method Result getSessionStatus(array $args = [])
 * @method Promise getSessionStatusAsync(array $args = [])
 * @method Result getTableMetadata(array $args = [])
 * @method Promise getTableMetadataAsync(array $args = [])
 * @method Result getWorkGroup(array $args = [])
 * @method Promise getWorkGroupAsync(array $args = [])
 * @method Result importNotebook(array $args = [])
 * @method Promise importNotebookAsync(array $args = [])
 * @method Result listApplicationDPUSizes(array $args = [])
 * @method Promise listApplicationDPUSizesAsync(array $args = [])
 * @method Result listCalculationExecutions(array $args = [])
 * @method Promise listCalculationExecutionsAsync(array $args = [])
 * @method Result listCapacityReservations(array $args = [])
 * @method Promise listCapacityReservationsAsync(array $args = [])
 * @method Result listDataCatalogs(array $args = [])
 * @method Promise listDataCatalogsAsync(array $args = [])
 * @method Result listDatabases(array $args = [])
 * @method Promise listDatabasesAsync(array $args = [])
 * @method Result listEngineVersions(array $args = [])
 * @method Promise listEngineVersionsAsync(array $args = [])
 * @method Result listExecutors(array $args = [])
 * @method Promise listExecutorsAsync(array $args = [])
 * @method Result listNamedQueries(array $args = [])
 * @method Promise listNamedQueriesAsync(array $args = [])
 * @method Result listNotebookMetadata(array $args = [])
 * @method Promise listNotebookMetadataAsync(array $args = [])
 * @method Result listNotebookSessions(array $args = [])
 * @method Promise listNotebookSessionsAsync(array $args = [])
 * @method Result listPreparedStatements(array $args = [])
 * @method Promise listPreparedStatementsAsync(array $args = [])
 * @method Result listQueryExecutions(array $args = [])
 * @method Promise listQueryExecutionsAsync(array $args = [])
 * @method Result listSessions(array $args = [])
 * @method Promise listSessionsAsync(array $args = [])
 * @method Result listTableMetadata(array $args = [])
 * @method Promise listTableMetadataAsync(array $args = [])
 * @method Result listTagsForResource(array $args = [])
 * @method Promise listTagsForResourceAsync(array $args = [])
 * @method Result listWorkGroups(array $args = [])
 * @method Promise listWorkGroupsAsync(array $args = [])
 * @method Result putCapacityAssignmentConfiguration(array $args = [])
 * @method Promise putCapacityAssignmentConfigurationAsync(array $args = [])
 * @method Result startCalculationExecution(array $args = [])
 * @method Promise startCalculationExecutionAsync(array $args = [])
 * @method Result startQueryExecution(array $args = [])
 * @method Promise startQueryExecutionAsync(array $args = [])
 * @method Result startSession(array $args = [])
 * @method Promise startSessionAsync(array $args = [])
 * @method Result stopCalculationExecution(array $args = [])
 * @method Promise stopCalculationExecutionAsync(array $args = [])
 * @method Result stopQueryExecution(array $args = [])
 * @method Promise stopQueryExecutionAsync(array $args = [])
 * @method Result tagResource(array $args = [])
 * @method Promise tagResourceAsync(array $args = [])
 * @method Result terminateSession(array $args = [])
 * @method Promise terminateSessionAsync(array $args = [])
 * @method Result untagResource(array $args = [])
 * @method Promise untagResourceAsync(array $args = [])
 * @method Result updateCapacityReservation(array $args = [])
 * @method Promise updateCapacityReservationAsync(array $args = [])
 * @method Result updateDataCatalog(array $args = [])
 * @method Promise updateDataCatalogAsync(array $args = [])
 * @method Result updateNamedQuery(array $args = [])
 * @method Promise updateNamedQueryAsync(array $args = [])
 * @method Result updateNotebook(array $args = [])
 * @method Promise updateNotebookAsync(array $args = [])
 * @method Result updateNotebookMetadata(array $args = [])
 * @method Promise updateNotebookMetadataAsync(array $args = [])
 * @method Result updatePreparedStatement(array $args = [])
 * @method Promise updatePreparedStatementAsync(array $args = [])
 * @method Result updateWorkGroup(array $args = [])
 * @method Promise updateWorkGroupAsync(array $args = [])
 */
class AthenaClient extends AwsClient {}
