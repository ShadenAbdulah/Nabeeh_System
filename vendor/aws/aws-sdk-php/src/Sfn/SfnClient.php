<?php
namespace Aws\Sfn;

use Aws\AwsClient;
use Aws\Result;
use GuzzleHttp\Promise\Promise;

/**
 * This client is used to interact with the **AWS Step Functions** service.
 * @method Result createActivity(array $args = [])
 * @method Promise createActivityAsync(array $args = [])
 * @method Result createStateMachine(array $args = [])
 * @method Promise createStateMachineAsync(array $args = [])
 * @method Result createStateMachineAlias(array $args = [])
 * @method Promise createStateMachineAliasAsync(array $args = [])
 * @method Result deleteActivity(array $args = [])
 * @method Promise deleteActivityAsync(array $args = [])
 * @method Result deleteStateMachine(array $args = [])
 * @method Promise deleteStateMachineAsync(array $args = [])
 * @method Result deleteStateMachineAlias(array $args = [])
 * @method Promise deleteStateMachineAliasAsync(array $args = [])
 * @method Result deleteStateMachineVersion(array $args = [])
 * @method Promise deleteStateMachineVersionAsync(array $args = [])
 * @method Result describeActivity(array $args = [])
 * @method Promise describeActivityAsync(array $args = [])
 * @method Result describeExecution(array $args = [])
 * @method Promise describeExecutionAsync(array $args = [])
 * @method Result describeMapRun(array $args = [])
 * @method Promise describeMapRunAsync(array $args = [])
 * @method Result describeStateMachine(array $args = [])
 * @method Promise describeStateMachineAsync(array $args = [])
 * @method Result describeStateMachineAlias(array $args = [])
 * @method Promise describeStateMachineAliasAsync(array $args = [])
 * @method Result describeStateMachineForExecution(array $args = [])
 * @method Promise describeStateMachineForExecutionAsync(array $args = [])
 * @method Result getActivityTask(array $args = [])
 * @method Promise getActivityTaskAsync(array $args = [])
 * @method Result getExecutionHistory(array $args = [])
 * @method Promise getExecutionHistoryAsync(array $args = [])
 * @method Result listActivities(array $args = [])
 * @method Promise listActivitiesAsync(array $args = [])
 * @method Result listExecutions(array $args = [])
 * @method Promise listExecutionsAsync(array $args = [])
 * @method Result listMapRuns(array $args = [])
 * @method Promise listMapRunsAsync(array $args = [])
 * @method Result listStateMachineAliases(array $args = [])
 * @method Promise listStateMachineAliasesAsync(array $args = [])
 * @method Result listStateMachineVersions(array $args = [])
 * @method Promise listStateMachineVersionsAsync(array $args = [])
 * @method Result listStateMachines(array $args = [])
 * @method Promise listStateMachinesAsync(array $args = [])
 * @method Result listTagsForResource(array $args = [])
 * @method Promise listTagsForResourceAsync(array $args = [])
 * @method Result publishStateMachineVersion(array $args = [])
 * @method Promise publishStateMachineVersionAsync(array $args = [])
 * @method Result redriveExecution(array $args = [])
 * @method Promise redriveExecutionAsync(array $args = [])
 * @method Result sendTaskFailure(array $args = [])
 * @method Promise sendTaskFailureAsync(array $args = [])
 * @method Result sendTaskHeartbeat(array $args = [])
 * @method Promise sendTaskHeartbeatAsync(array $args = [])
 * @method Result sendTaskSuccess(array $args = [])
 * @method Promise sendTaskSuccessAsync(array $args = [])
 * @method Result startExecution(array $args = [])
 * @method Promise startExecutionAsync(array $args = [])
 * @method Result startSyncExecution(array $args = [])
 * @method Promise startSyncExecutionAsync(array $args = [])
 * @method Result stopExecution(array $args = [])
 * @method Promise stopExecutionAsync(array $args = [])
 * @method Result tagResource(array $args = [])
 * @method Promise tagResourceAsync(array $args = [])
 * @method Result testState(array $args = [])
 * @method Promise testStateAsync(array $args = [])
 * @method Result untagResource(array $args = [])
 * @method Promise untagResourceAsync(array $args = [])
 * @method Result updateMapRun(array $args = [])
 * @method Promise updateMapRunAsync(array $args = [])
 * @method Result updateStateMachine(array $args = [])
 * @method Promise updateStateMachineAsync(array $args = [])
 * @method Result updateStateMachineAlias(array $args = [])
 * @method Promise updateStateMachineAliasAsync(array $args = [])
 */
class SfnClient extends AwsClient {}
