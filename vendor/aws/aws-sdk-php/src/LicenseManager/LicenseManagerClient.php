<?php
namespace Aws\LicenseManager;

use Aws\AwsClient;
use Aws\Result;
use GuzzleHttp\Promise\Promise;

/**
 * This client is used to interact with the **AWS License Manager** service.
 * @method Result acceptGrant(array $args = [])
 * @method Promise acceptGrantAsync(array $args = [])
 * @method Result checkInLicense(array $args = [])
 * @method Promise checkInLicenseAsync(array $args = [])
 * @method Result checkoutBorrowLicense(array $args = [])
 * @method Promise checkoutBorrowLicenseAsync(array $args = [])
 * @method Result checkoutLicense(array $args = [])
 * @method Promise checkoutLicenseAsync(array $args = [])
 * @method Result createGrant(array $args = [])
 * @method Promise createGrantAsync(array $args = [])
 * @method Result createGrantVersion(array $args = [])
 * @method Promise createGrantVersionAsync(array $args = [])
 * @method Result createLicense(array $args = [])
 * @method Promise createLicenseAsync(array $args = [])
 * @method Result createLicenseConfiguration(array $args = [])
 * @method Promise createLicenseConfigurationAsync(array $args = [])
 * @method Result createLicenseConversionTaskForResource(array $args = [])
 * @method Promise createLicenseConversionTaskForResourceAsync(array $args = [])
 * @method Result createLicenseManagerReportGenerator(array $args = [])
 * @method Promise createLicenseManagerReportGeneratorAsync(array $args = [])
 * @method Result createLicenseVersion(array $args = [])
 * @method Promise createLicenseVersionAsync(array $args = [])
 * @method Result createToken(array $args = [])
 * @method Promise createTokenAsync(array $args = [])
 * @method Result deleteGrant(array $args = [])
 * @method Promise deleteGrantAsync(array $args = [])
 * @method Result deleteLicense(array $args = [])
 * @method Promise deleteLicenseAsync(array $args = [])
 * @method Result deleteLicenseConfiguration(array $args = [])
 * @method Promise deleteLicenseConfigurationAsync(array $args = [])
 * @method Result deleteLicenseManagerReportGenerator(array $args = [])
 * @method Promise deleteLicenseManagerReportGeneratorAsync(array $args = [])
 * @method Result deleteToken(array $args = [])
 * @method Promise deleteTokenAsync(array $args = [])
 * @method Result extendLicenseConsumption(array $args = [])
 * @method Promise extendLicenseConsumptionAsync(array $args = [])
 * @method Result getAccessToken(array $args = [])
 * @method Promise getAccessTokenAsync(array $args = [])
 * @method Result getGrant(array $args = [])
 * @method Promise getGrantAsync(array $args = [])
 * @method Result getLicense(array $args = [])
 * @method Promise getLicenseAsync(array $args = [])
 * @method Result getLicenseConfiguration(array $args = [])
 * @method Promise getLicenseConfigurationAsync(array $args = [])
 * @method Result getLicenseConversionTask(array $args = [])
 * @method Promise getLicenseConversionTaskAsync(array $args = [])
 * @method Result getLicenseManagerReportGenerator(array $args = [])
 * @method Promise getLicenseManagerReportGeneratorAsync(array $args = [])
 * @method Result getLicenseUsage(array $args = [])
 * @method Promise getLicenseUsageAsync(array $args = [])
 * @method Result getServiceSettings(array $args = [])
 * @method Promise getServiceSettingsAsync(array $args = [])
 * @method Result listAssociationsForLicenseConfiguration(array $args = [])
 * @method Promise listAssociationsForLicenseConfigurationAsync(array $args = [])
 * @method Result listDistributedGrants(array $args = [])
 * @method Promise listDistributedGrantsAsync(array $args = [])
 * @method Result listFailuresForLicenseConfigurationOperations(array $args = [])
 * @method Promise listFailuresForLicenseConfigurationOperationsAsync(array $args = [])
 * @method Result listLicenseConfigurations(array $args = [])
 * @method Promise listLicenseConfigurationsAsync(array $args = [])
 * @method Result listLicenseConversionTasks(array $args = [])
 * @method Promise listLicenseConversionTasksAsync(array $args = [])
 * @method Result listLicenseManagerReportGenerators(array $args = [])
 * @method Promise listLicenseManagerReportGeneratorsAsync(array $args = [])
 * @method Result listLicenseSpecificationsForResource(array $args = [])
 * @method Promise listLicenseSpecificationsForResourceAsync(array $args = [])
 * @method Result listLicenseVersions(array $args = [])
 * @method Promise listLicenseVersionsAsync(array $args = [])
 * @method Result listLicenses(array $args = [])
 * @method Promise listLicensesAsync(array $args = [])
 * @method Result listReceivedGrants(array $args = [])
 * @method Promise listReceivedGrantsAsync(array $args = [])
 * @method Result listReceivedGrantsForOrganization(array $args = [])
 * @method Promise listReceivedGrantsForOrganizationAsync(array $args = [])
 * @method Result listReceivedLicenses(array $args = [])
 * @method Promise listReceivedLicensesAsync(array $args = [])
 * @method Result listReceivedLicensesForOrganization(array $args = [])
 * @method Promise listReceivedLicensesForOrganizationAsync(array $args = [])
 * @method Result listResourceInventory(array $args = [])
 * @method Promise listResourceInventoryAsync(array $args = [])
 * @method Result listTagsForResource(array $args = [])
 * @method Promise listTagsForResourceAsync(array $args = [])
 * @method Result listTokens(array $args = [])
 * @method Promise listTokensAsync(array $args = [])
 * @method Result listUsageForLicenseConfiguration(array $args = [])
 * @method Promise listUsageForLicenseConfigurationAsync(array $args = [])
 * @method Result rejectGrant(array $args = [])
 * @method Promise rejectGrantAsync(array $args = [])
 * @method Result tagResource(array $args = [])
 * @method Promise tagResourceAsync(array $args = [])
 * @method Result untagResource(array $args = [])
 * @method Promise untagResourceAsync(array $args = [])
 * @method Result updateLicenseConfiguration(array $args = [])
 * @method Promise updateLicenseConfigurationAsync(array $args = [])
 * @method Result updateLicenseManagerReportGenerator(array $args = [])
 * @method Promise updateLicenseManagerReportGeneratorAsync(array $args = [])
 * @method Result updateLicenseSpecificationsForResource(array $args = [])
 * @method Promise updateLicenseSpecificationsForResourceAsync(array $args = [])
 * @method Result updateServiceSettings(array $args = [])
 * @method Promise updateServiceSettingsAsync(array $args = [])
 */
class LicenseManagerClient extends AwsClient {}
