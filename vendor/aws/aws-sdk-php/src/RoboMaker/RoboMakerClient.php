<?php
namespace Aws\RoboMaker;

use Aws\AwsClient;
use Aws\Result;
use GuzzleHttp\Promise\Promise;

/**
 * This client is used to interact with the **AWS RoboMaker** service.
 * @method Result batchDeleteWorlds(array $args = [])
 * @method Promise batchDeleteWorldsAsync(array $args = [])
 * @method Result batchDescribeSimulationJob(array $args = [])
 * @method Promise batchDescribeSimulationJobAsync(array $args = [])
 * @method Result cancelDeploymentJob(array $args = [])
 * @method Promise cancelDeploymentJobAsync(array $args = [])
 * @method Result cancelSimulationJob(array $args = [])
 * @method Promise cancelSimulationJobAsync(array $args = [])
 * @method Result cancelSimulationJobBatch(array $args = [])
 * @method Promise cancelSimulationJobBatchAsync(array $args = [])
 * @method Result cancelWorldExportJob(array $args = [])
 * @method Promise cancelWorldExportJobAsync(array $args = [])
 * @method Result cancelWorldGenerationJob(array $args = [])
 * @method Promise cancelWorldGenerationJobAsync(array $args = [])
 * @method Result createDeploymentJob(array $args = [])
 * @method Promise createDeploymentJobAsync(array $args = [])
 * @method Result createFleet(array $args = [])
 * @method Promise createFleetAsync(array $args = [])
 * @method Result createRobot(array $args = [])
 * @method Promise createRobotAsync(array $args = [])
 * @method Result createRobotApplication(array $args = [])
 * @method Promise createRobotApplicationAsync(array $args = [])
 * @method Result createRobotApplicationVersion(array $args = [])
 * @method Promise createRobotApplicationVersionAsync(array $args = [])
 * @method Result createSimulationApplication(array $args = [])
 * @method Promise createSimulationApplicationAsync(array $args = [])
 * @method Result createSimulationApplicationVersion(array $args = [])
 * @method Promise createSimulationApplicationVersionAsync(array $args = [])
 * @method Result createSimulationJob(array $args = [])
 * @method Promise createSimulationJobAsync(array $args = [])
 * @method Result createWorldExportJob(array $args = [])
 * @method Promise createWorldExportJobAsync(array $args = [])
 * @method Result createWorldGenerationJob(array $args = [])
 * @method Promise createWorldGenerationJobAsync(array $args = [])
 * @method Result createWorldTemplate(array $args = [])
 * @method Promise createWorldTemplateAsync(array $args = [])
 * @method Result deleteFleet(array $args = [])
 * @method Promise deleteFleetAsync(array $args = [])
 * @method Result deleteRobot(array $args = [])
 * @method Promise deleteRobotAsync(array $args = [])
 * @method Result deleteRobotApplication(array $args = [])
 * @method Promise deleteRobotApplicationAsync(array $args = [])
 * @method Result deleteSimulationApplication(array $args = [])
 * @method Promise deleteSimulationApplicationAsync(array $args = [])
 * @method Result deleteWorldTemplate(array $args = [])
 * @method Promise deleteWorldTemplateAsync(array $args = [])
 * @method Result deregisterRobot(array $args = [])
 * @method Promise deregisterRobotAsync(array $args = [])
 * @method Result describeDeploymentJob(array $args = [])
 * @method Promise describeDeploymentJobAsync(array $args = [])
 * @method Result describeFleet(array $args = [])
 * @method Promise describeFleetAsync(array $args = [])
 * @method Result describeRobot(array $args = [])
 * @method Promise describeRobotAsync(array $args = [])
 * @method Result describeRobotApplication(array $args = [])
 * @method Promise describeRobotApplicationAsync(array $args = [])
 * @method Result describeSimulationApplication(array $args = [])
 * @method Promise describeSimulationApplicationAsync(array $args = [])
 * @method Result describeSimulationJob(array $args = [])
 * @method Promise describeSimulationJobAsync(array $args = [])
 * @method Result describeSimulationJobBatch(array $args = [])
 * @method Promise describeSimulationJobBatchAsync(array $args = [])
 * @method Result describeWorld(array $args = [])
 * @method Promise describeWorldAsync(array $args = [])
 * @method Result describeWorldExportJob(array $args = [])
 * @method Promise describeWorldExportJobAsync(array $args = [])
 * @method Result describeWorldGenerationJob(array $args = [])
 * @method Promise describeWorldGenerationJobAsync(array $args = [])
 * @method Result describeWorldTemplate(array $args = [])
 * @method Promise describeWorldTemplateAsync(array $args = [])
 * @method Result getWorldTemplateBody(array $args = [])
 * @method Promise getWorldTemplateBodyAsync(array $args = [])
 * @method Result listDeploymentJobs(array $args = [])
 * @method Promise listDeploymentJobsAsync(array $args = [])
 * @method Result listFleets(array $args = [])
 * @method Promise listFleetsAsync(array $args = [])
 * @method Result listRobotApplications(array $args = [])
 * @method Promise listRobotApplicationsAsync(array $args = [])
 * @method Result listRobots(array $args = [])
 * @method Promise listRobotsAsync(array $args = [])
 * @method Result listSimulationApplications(array $args = [])
 * @method Promise listSimulationApplicationsAsync(array $args = [])
 * @method Result listSimulationJobBatches(array $args = [])
 * @method Promise listSimulationJobBatchesAsync(array $args = [])
 * @method Result listSimulationJobs(array $args = [])
 * @method Promise listSimulationJobsAsync(array $args = [])
 * @method Result listTagsForResource(array $args = [])
 * @method Promise listTagsForResourceAsync(array $args = [])
 * @method Result listWorldExportJobs(array $args = [])
 * @method Promise listWorldExportJobsAsync(array $args = [])
 * @method Result listWorldGenerationJobs(array $args = [])
 * @method Promise listWorldGenerationJobsAsync(array $args = [])
 * @method Result listWorldTemplates(array $args = [])
 * @method Promise listWorldTemplatesAsync(array $args = [])
 * @method Result listWorlds(array $args = [])
 * @method Promise listWorldsAsync(array $args = [])
 * @method Result registerRobot(array $args = [])
 * @method Promise registerRobotAsync(array $args = [])
 * @method Result restartSimulationJob(array $args = [])
 * @method Promise restartSimulationJobAsync(array $args = [])
 * @method Result startSimulationJobBatch(array $args = [])
 * @method Promise startSimulationJobBatchAsync(array $args = [])
 * @method Result syncDeploymentJob(array $args = [])
 * @method Promise syncDeploymentJobAsync(array $args = [])
 * @method Result tagResource(array $args = [])
 * @method Promise tagResourceAsync(array $args = [])
 * @method Result untagResource(array $args = [])
 * @method Promise untagResourceAsync(array $args = [])
 * @method Result updateRobotApplication(array $args = [])
 * @method Promise updateRobotApplicationAsync(array $args = [])
 * @method Result updateSimulationApplication(array $args = [])
 * @method Promise updateSimulationApplicationAsync(array $args = [])
 * @method Result updateWorldTemplate(array $args = [])
 * @method Promise updateWorldTemplateAsync(array $args = [])
 */
class RoboMakerClient extends AwsClient {}
