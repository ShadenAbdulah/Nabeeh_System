<?php
namespace Aws\OpenSearchService;

use Aws\AwsClient;
use Aws\Result;
use GuzzleHttp\Promise\Promise;

/**
 * This client is used to interact with the **Amazon OpenSearch Service** service.
 * @method Result acceptInboundConnection(array $args = [])
 * @method Promise acceptInboundConnectionAsync(array $args = [])
 * @method Result addDataSource(array $args = [])
 * @method Promise addDataSourceAsync(array $args = [])
 * @method Result addTags(array $args = [])
 * @method Promise addTagsAsync(array $args = [])
 * @method Result associatePackage(array $args = [])
 * @method Promise associatePackageAsync(array $args = [])
 * @method Result authorizeVpcEndpointAccess(array $args = [])
 * @method Promise authorizeVpcEndpointAccessAsync(array $args = [])
 * @method Result cancelDomainConfigChange(array $args = [])
 * @method Promise cancelDomainConfigChangeAsync(array $args = [])
 * @method Result cancelServiceSoftwareUpdate(array $args = [])
 * @method Promise cancelServiceSoftwareUpdateAsync(array $args = [])
 * @method Result createDomain(array $args = [])
 * @method Promise createDomainAsync(array $args = [])
 * @method Result createOutboundConnection(array $args = [])
 * @method Promise createOutboundConnectionAsync(array $args = [])
 * @method Result createPackage(array $args = [])
 * @method Promise createPackageAsync(array $args = [])
 * @method Result createVpcEndpoint(array $args = [])
 * @method Promise createVpcEndpointAsync(array $args = [])
 * @method Result deleteDataSource(array $args = [])
 * @method Promise deleteDataSourceAsync(array $args = [])
 * @method Result deleteDomain(array $args = [])
 * @method Promise deleteDomainAsync(array $args = [])
 * @method Result deleteInboundConnection(array $args = [])
 * @method Promise deleteInboundConnectionAsync(array $args = [])
 * @method Result deleteOutboundConnection(array $args = [])
 * @method Promise deleteOutboundConnectionAsync(array $args = [])
 * @method Result deletePackage(array $args = [])
 * @method Promise deletePackageAsync(array $args = [])
 * @method Result deleteVpcEndpoint(array $args = [])
 * @method Promise deleteVpcEndpointAsync(array $args = [])
 * @method Result describeDomain(array $args = [])
 * @method Promise describeDomainAsync(array $args = [])
 * @method Result describeDomainAutoTunes(array $args = [])
 * @method Promise describeDomainAutoTunesAsync(array $args = [])
 * @method Result describeDomainChangeProgress(array $args = [])
 * @method Promise describeDomainChangeProgressAsync(array $args = [])
 * @method Result describeDomainConfig(array $args = [])
 * @method Promise describeDomainConfigAsync(array $args = [])
 * @method Result describeDomainHealth(array $args = [])
 * @method Promise describeDomainHealthAsync(array $args = [])
 * @method Result describeDomainNodes(array $args = [])
 * @method Promise describeDomainNodesAsync(array $args = [])
 * @method Result describeDomains(array $args = [])
 * @method Promise describeDomainsAsync(array $args = [])
 * @method Result describeDryRunProgress(array $args = [])
 * @method Promise describeDryRunProgressAsync(array $args = [])
 * @method Result describeInboundConnections(array $args = [])
 * @method Promise describeInboundConnectionsAsync(array $args = [])
 * @method Result describeInstanceTypeLimits(array $args = [])
 * @method Promise describeInstanceTypeLimitsAsync(array $args = [])
 * @method Result describeOutboundConnections(array $args = [])
 * @method Promise describeOutboundConnectionsAsync(array $args = [])
 * @method Result describePackages(array $args = [])
 * @method Promise describePackagesAsync(array $args = [])
 * @method Result describeReservedInstanceOfferings(array $args = [])
 * @method Promise describeReservedInstanceOfferingsAsync(array $args = [])
 * @method Result describeReservedInstances(array $args = [])
 * @method Promise describeReservedInstancesAsync(array $args = [])
 * @method Result describeVpcEndpoints(array $args = [])
 * @method Promise describeVpcEndpointsAsync(array $args = [])
 * @method Result dissociatePackage(array $args = [])
 * @method Promise dissociatePackageAsync(array $args = [])
 * @method Result getCompatibleVersions(array $args = [])
 * @method Promise getCompatibleVersionsAsync(array $args = [])
 * @method Result getDataSource(array $args = [])
 * @method Promise getDataSourceAsync(array $args = [])
 * @method Result getDomainMaintenanceStatus(array $args = [])
 * @method Promise getDomainMaintenanceStatusAsync(array $args = [])
 * @method Result getPackageVersionHistory(array $args = [])
 * @method Promise getPackageVersionHistoryAsync(array $args = [])
 * @method Result getUpgradeHistory(array $args = [])
 * @method Promise getUpgradeHistoryAsync(array $args = [])
 * @method Result getUpgradeStatus(array $args = [])
 * @method Promise getUpgradeStatusAsync(array $args = [])
 * @method Result listDataSources(array $args = [])
 * @method Promise listDataSourcesAsync(array $args = [])
 * @method Result listDomainMaintenances(array $args = [])
 * @method Promise listDomainMaintenancesAsync(array $args = [])
 * @method Result listDomainNames(array $args = [])
 * @method Promise listDomainNamesAsync(array $args = [])
 * @method Result listDomainsForPackage(array $args = [])
 * @method Promise listDomainsForPackageAsync(array $args = [])
 * @method Result listInstanceTypeDetails(array $args = [])
 * @method Promise listInstanceTypeDetailsAsync(array $args = [])
 * @method Result listPackagesForDomain(array $args = [])
 * @method Promise listPackagesForDomainAsync(array $args = [])
 * @method Result listScheduledActions(array $args = [])
 * @method Promise listScheduledActionsAsync(array $args = [])
 * @method Result listTags(array $args = [])
 * @method Promise listTagsAsync(array $args = [])
 * @method Result listVersions(array $args = [])
 * @method Promise listVersionsAsync(array $args = [])
 * @method Result listVpcEndpointAccess(array $args = [])
 * @method Promise listVpcEndpointAccessAsync(array $args = [])
 * @method Result listVpcEndpoints(array $args = [])
 * @method Promise listVpcEndpointsAsync(array $args = [])
 * @method Result listVpcEndpointsForDomain(array $args = [])
 * @method Promise listVpcEndpointsForDomainAsync(array $args = [])
 * @method Result purchaseReservedInstanceOffering(array $args = [])
 * @method Promise purchaseReservedInstanceOfferingAsync(array $args = [])
 * @method Result rejectInboundConnection(array $args = [])
 * @method Promise rejectInboundConnectionAsync(array $args = [])
 * @method Result removeTags(array $args = [])
 * @method Promise removeTagsAsync(array $args = [])
 * @method Result revokeVpcEndpointAccess(array $args = [])
 * @method Promise revokeVpcEndpointAccessAsync(array $args = [])
 * @method Result startDomainMaintenance(array $args = [])
 * @method Promise startDomainMaintenanceAsync(array $args = [])
 * @method Result startServiceSoftwareUpdate(array $args = [])
 * @method Promise startServiceSoftwareUpdateAsync(array $args = [])
 * @method Result updateDataSource(array $args = [])
 * @method Promise updateDataSourceAsync(array $args = [])
 * @method Result updateDomainConfig(array $args = [])
 * @method Promise updateDomainConfigAsync(array $args = [])
 * @method Result updatePackage(array $args = [])
 * @method Promise updatePackageAsync(array $args = [])
 * @method Result updateScheduledAction(array $args = [])
 * @method Promise updateScheduledActionAsync(array $args = [])
 * @method Result updateVpcEndpoint(array $args = [])
 * @method Promise updateVpcEndpointAsync(array $args = [])
 * @method Result upgradeDomain(array $args = [])
 * @method Promise upgradeDomainAsync(array $args = [])
 */
class OpenSearchServiceClient extends AwsClient {}
