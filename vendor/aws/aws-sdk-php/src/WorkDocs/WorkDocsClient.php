<?php
namespace Aws\WorkDocs;

use Aws\AwsClient;
use Aws\Result;
use GuzzleHttp\Promise\Promise;

/**
 * This client is used to interact with the **Amazon WorkDocs** service.
 * @method Result abortDocumentVersionUpload(array $args = [])
 * @method Promise abortDocumentVersionUploadAsync(array $args = [])
 * @method Result activateUser(array $args = [])
 * @method Promise activateUserAsync(array $args = [])
 * @method Result addResourcePermissions(array $args = [])
 * @method Promise addResourcePermissionsAsync(array $args = [])
 * @method Result createComment(array $args = [])
 * @method Promise createCommentAsync(array $args = [])
 * @method Result createCustomMetadata(array $args = [])
 * @method Promise createCustomMetadataAsync(array $args = [])
 * @method Result createFolder(array $args = [])
 * @method Promise createFolderAsync(array $args = [])
 * @method Result createLabels(array $args = [])
 * @method Promise createLabelsAsync(array $args = [])
 * @method Result createNotificationSubscription(array $args = [])
 * @method Promise createNotificationSubscriptionAsync(array $args = [])
 * @method Result createUser(array $args = [])
 * @method Promise createUserAsync(array $args = [])
 * @method Result deactivateUser(array $args = [])
 * @method Promise deactivateUserAsync(array $args = [])
 * @method Result deleteComment(array $args = [])
 * @method Promise deleteCommentAsync(array $args = [])
 * @method Result deleteCustomMetadata(array $args = [])
 * @method Promise deleteCustomMetadataAsync(array $args = [])
 * @method Result deleteDocument(array $args = [])
 * @method Promise deleteDocumentAsync(array $args = [])
 * @method Result deleteDocumentVersion(array $args = [])
 * @method Promise deleteDocumentVersionAsync(array $args = [])
 * @method Result deleteFolder(array $args = [])
 * @method Promise deleteFolderAsync(array $args = [])
 * @method Result deleteFolderContents(array $args = [])
 * @method Promise deleteFolderContentsAsync(array $args = [])
 * @method Result deleteLabels(array $args = [])
 * @method Promise deleteLabelsAsync(array $args = [])
 * @method Result deleteNotificationSubscription(array $args = [])
 * @method Promise deleteNotificationSubscriptionAsync(array $args = [])
 * @method Result deleteUser(array $args = [])
 * @method Promise deleteUserAsync(array $args = [])
 * @method Result describeActivities(array $args = [])
 * @method Promise describeActivitiesAsync(array $args = [])
 * @method Result describeComments(array $args = [])
 * @method Promise describeCommentsAsync(array $args = [])
 * @method Result describeDocumentVersions(array $args = [])
 * @method Promise describeDocumentVersionsAsync(array $args = [])
 * @method Result describeFolderContents(array $args = [])
 * @method Promise describeFolderContentsAsync(array $args = [])
 * @method Result describeGroups(array $args = [])
 * @method Promise describeGroupsAsync(array $args = [])
 * @method Result describeNotificationSubscriptions(array $args = [])
 * @method Promise describeNotificationSubscriptionsAsync(array $args = [])
 * @method Result describeResourcePermissions(array $args = [])
 * @method Promise describeResourcePermissionsAsync(array $args = [])
 * @method Result describeRootFolders(array $args = [])
 * @method Promise describeRootFoldersAsync(array $args = [])
 * @method Result describeUsers(array $args = [])
 * @method Promise describeUsersAsync(array $args = [])
 * @method Result getCurrentUser(array $args = [])
 * @method Promise getCurrentUserAsync(array $args = [])
 * @method Result getDocument(array $args = [])
 * @method Promise getDocumentAsync(array $args = [])
 * @method Result getDocumentPath(array $args = [])
 * @method Promise getDocumentPathAsync(array $args = [])
 * @method Result getDocumentVersion(array $args = [])
 * @method Promise getDocumentVersionAsync(array $args = [])
 * @method Result getFolder(array $args = [])
 * @method Promise getFolderAsync(array $args = [])
 * @method Result getFolderPath(array $args = [])
 * @method Promise getFolderPathAsync(array $args = [])
 * @method Result getResources(array $args = [])
 * @method Promise getResourcesAsync(array $args = [])
 * @method Result initiateDocumentVersionUpload(array $args = [])
 * @method Promise initiateDocumentVersionUploadAsync(array $args = [])
 * @method Result removeAllResourcePermissions(array $args = [])
 * @method Promise removeAllResourcePermissionsAsync(array $args = [])
 * @method Result removeResourcePermission(array $args = [])
 * @method Promise removeResourcePermissionAsync(array $args = [])
 * @method Result restoreDocumentVersions(array $args = [])
 * @method Promise restoreDocumentVersionsAsync(array $args = [])
 * @method Result searchResources(array $args = [])
 * @method Promise searchResourcesAsync(array $args = [])
 * @method Result updateDocument(array $args = [])
 * @method Promise updateDocumentAsync(array $args = [])
 * @method Result updateDocumentVersion(array $args = [])
 * @method Promise updateDocumentVersionAsync(array $args = [])
 * @method Result updateFolder(array $args = [])
 * @method Promise updateFolderAsync(array $args = [])
 * @method Result updateUser(array $args = [])
 * @method Promise updateUserAsync(array $args = [])
 */
class WorkDocsClient extends AwsClient {}
