<?php
namespace Aws\ElasticBeanstalk;

use Aws\AwsClient;
use Aws\Result;
use GuzzleHttp\Promise\Promise;

/**
 * This client is used to interact with the **AWS Elastic Beanstalk** service.
 *
 * @method Result abortEnvironmentUpdate(array $args = [])
 * @method Promise abortEnvironmentUpdateAsync(array $args = [])
 * @method Result applyEnvironmentManagedAction(array $args = [])
 * @method Promise applyEnvironmentManagedActionAsync(array $args = [])
 * @method Result associateEnvironmentOperationsRole(array $args = [])
 * @method Promise associateEnvironmentOperationsRoleAsync(array $args = [])
 * @method Result checkDNSAvailability(array $args = [])
 * @method Promise checkDNSAvailabilityAsync(array $args = [])
 * @method Result composeEnvironments(array $args = [])
 * @method Promise composeEnvironmentsAsync(array $args = [])
 * @method Result createApplication(array $args = [])
 * @method Promise createApplicationAsync(array $args = [])
 * @method Result createApplicationVersion(array $args = [])
 * @method Promise createApplicationVersionAsync(array $args = [])
 * @method Result createConfigurationTemplate(array $args = [])
 * @method Promise createConfigurationTemplateAsync(array $args = [])
 * @method Result createEnvironment(array $args = [])
 * @method Promise createEnvironmentAsync(array $args = [])
 * @method Result createPlatformVersion(array $args = [])
 * @method Promise createPlatformVersionAsync(array $args = [])
 * @method Result createStorageLocation(array $args = [])
 * @method Promise createStorageLocationAsync(array $args = [])
 * @method Result deleteApplication(array $args = [])
 * @method Promise deleteApplicationAsync(array $args = [])
 * @method Result deleteApplicationVersion(array $args = [])
 * @method Promise deleteApplicationVersionAsync(array $args = [])
 * @method Result deleteConfigurationTemplate(array $args = [])
 * @method Promise deleteConfigurationTemplateAsync(array $args = [])
 * @method Result deleteEnvironmentConfiguration(array $args = [])
 * @method Promise deleteEnvironmentConfigurationAsync(array $args = [])
 * @method Result deletePlatformVersion(array $args = [])
 * @method Promise deletePlatformVersionAsync(array $args = [])
 * @method Result describeAccountAttributes(array $args = [])
 * @method Promise describeAccountAttributesAsync(array $args = [])
 * @method Result describeApplicationVersions(array $args = [])
 * @method Promise describeApplicationVersionsAsync(array $args = [])
 * @method Result describeApplications(array $args = [])
 * @method Promise describeApplicationsAsync(array $args = [])
 * @method Result describeConfigurationOptions(array $args = [])
 * @method Promise describeConfigurationOptionsAsync(array $args = [])
 * @method Result describeConfigurationSettings(array $args = [])
 * @method Promise describeConfigurationSettingsAsync(array $args = [])
 * @method Result describeEnvironmentHealth(array $args = [])
 * @method Promise describeEnvironmentHealthAsync(array $args = [])
 * @method Result describeEnvironmentManagedActionHistory(array $args = [])
 * @method Promise describeEnvironmentManagedActionHistoryAsync(array $args = [])
 * @method Result describeEnvironmentManagedActions(array $args = [])
 * @method Promise describeEnvironmentManagedActionsAsync(array $args = [])
 * @method Result describeEnvironmentResources(array $args = [])
 * @method Promise describeEnvironmentResourcesAsync(array $args = [])
 * @method Result describeEnvironments(array $args = [])
 * @method Promise describeEnvironmentsAsync(array $args = [])
 * @method Result describeEvents(array $args = [])
 * @method Promise describeEventsAsync(array $args = [])
 * @method Result describeInstancesHealth(array $args = [])
 * @method Promise describeInstancesHealthAsync(array $args = [])
 * @method Result describePlatformVersion(array $args = [])
 * @method Promise describePlatformVersionAsync(array $args = [])
 * @method Result disassociateEnvironmentOperationsRole(array $args = [])
 * @method Promise disassociateEnvironmentOperationsRoleAsync(array $args = [])
 * @method Result listAvailableSolutionStacks(array $args = [])
 * @method Promise listAvailableSolutionStacksAsync(array $args = [])
 * @method Result listPlatformBranches(array $args = [])
 * @method Promise listPlatformBranchesAsync(array $args = [])
 * @method Result listPlatformVersions(array $args = [])
 * @method Promise listPlatformVersionsAsync(array $args = [])
 * @method Result listTagsForResource(array $args = [])
 * @method Promise listTagsForResourceAsync(array $args = [])
 * @method Result rebuildEnvironment(array $args = [])
 * @method Promise rebuildEnvironmentAsync(array $args = [])
 * @method Result requestEnvironmentInfo(array $args = [])
 * @method Promise requestEnvironmentInfoAsync(array $args = [])
 * @method Result restartAppServer(array $args = [])
 * @method Promise restartAppServerAsync(array $args = [])
 * @method Result retrieveEnvironmentInfo(array $args = [])
 * @method Promise retrieveEnvironmentInfoAsync(array $args = [])
 * @method Result swapEnvironmentCNAMEs(array $args = [])
 * @method Promise swapEnvironmentCNAMEsAsync(array $args = [])
 * @method Result terminateEnvironment(array $args = [])
 * @method Promise terminateEnvironmentAsync(array $args = [])
 * @method Result updateApplication(array $args = [])
 * @method Promise updateApplicationAsync(array $args = [])
 * @method Result updateApplicationResourceLifecycle(array $args = [])
 * @method Promise updateApplicationResourceLifecycleAsync(array $args = [])
 * @method Result updateApplicationVersion(array $args = [])
 * @method Promise updateApplicationVersionAsync(array $args = [])
 * @method Result updateConfigurationTemplate(array $args = [])
 * @method Promise updateConfigurationTemplateAsync(array $args = [])
 * @method Result updateEnvironment(array $args = [])
 * @method Promise updateEnvironmentAsync(array $args = [])
 * @method Result updateTagsForResource(array $args = [])
 * @method Promise updateTagsForResourceAsync(array $args = [])
 * @method Result validateConfigurationSettings(array $args = [])
 * @method Promise validateConfigurationSettingsAsync(array $args = [])
 */
class ElasticBeanstalkClient extends AwsClient {}
