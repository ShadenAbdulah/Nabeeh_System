<?php
namespace Aws\IoTFleetWise;

use Aws\AwsClient;
use Aws\Result;
use GuzzleHttp\Promise\Promise;

/**
 * This client is used to interact with the **AWS IoT FleetWise** service.
 * @method Result associateVehicleFleet(array $args = [])
 * @method Promise associateVehicleFleetAsync(array $args = [])
 * @method Result batchCreateVehicle(array $args = [])
 * @method Promise batchCreateVehicleAsync(array $args = [])
 * @method Result batchUpdateVehicle(array $args = [])
 * @method Promise batchUpdateVehicleAsync(array $args = [])
 * @method Result createCampaign(array $args = [])
 * @method Promise createCampaignAsync(array $args = [])
 * @method Result createDecoderManifest(array $args = [])
 * @method Promise createDecoderManifestAsync(array $args = [])
 * @method Result createFleet(array $args = [])
 * @method Promise createFleetAsync(array $args = [])
 * @method Result createModelManifest(array $args = [])
 * @method Promise createModelManifestAsync(array $args = [])
 * @method Result createSignalCatalog(array $args = [])
 * @method Promise createSignalCatalogAsync(array $args = [])
 * @method Result createVehicle(array $args = [])
 * @method Promise createVehicleAsync(array $args = [])
 * @method Result deleteCampaign(array $args = [])
 * @method Promise deleteCampaignAsync(array $args = [])
 * @method Result deleteDecoderManifest(array $args = [])
 * @method Promise deleteDecoderManifestAsync(array $args = [])
 * @method Result deleteFleet(array $args = [])
 * @method Promise deleteFleetAsync(array $args = [])
 * @method Result deleteModelManifest(array $args = [])
 * @method Promise deleteModelManifestAsync(array $args = [])
 * @method Result deleteSignalCatalog(array $args = [])
 * @method Promise deleteSignalCatalogAsync(array $args = [])
 * @method Result deleteVehicle(array $args = [])
 * @method Promise deleteVehicleAsync(array $args = [])
 * @method Result disassociateVehicleFleet(array $args = [])
 * @method Promise disassociateVehicleFleetAsync(array $args = [])
 * @method Result getCampaign(array $args = [])
 * @method Promise getCampaignAsync(array $args = [])
 * @method Result getDecoderManifest(array $args = [])
 * @method Promise getDecoderManifestAsync(array $args = [])
 * @method Result getEncryptionConfiguration(array $args = [])
 * @method Promise getEncryptionConfigurationAsync(array $args = [])
 * @method Result getFleet(array $args = [])
 * @method Promise getFleetAsync(array $args = [])
 * @method Result getLoggingOptions(array $args = [])
 * @method Promise getLoggingOptionsAsync(array $args = [])
 * @method Result getModelManifest(array $args = [])
 * @method Promise getModelManifestAsync(array $args = [])
 * @method Result getRegisterAccountStatus(array $args = [])
 * @method Promise getRegisterAccountStatusAsync(array $args = [])
 * @method Result getSignalCatalog(array $args = [])
 * @method Promise getSignalCatalogAsync(array $args = [])
 * @method Result getVehicle(array $args = [])
 * @method Promise getVehicleAsync(array $args = [])
 * @method Result getVehicleStatus(array $args = [])
 * @method Promise getVehicleStatusAsync(array $args = [])
 * @method Result importDecoderManifest(array $args = [])
 * @method Promise importDecoderManifestAsync(array $args = [])
 * @method Result importSignalCatalog(array $args = [])
 * @method Promise importSignalCatalogAsync(array $args = [])
 * @method Result listCampaigns(array $args = [])
 * @method Promise listCampaignsAsync(array $args = [])
 * @method Result listDecoderManifestNetworkInterfaces(array $args = [])
 * @method Promise listDecoderManifestNetworkInterfacesAsync(array $args = [])
 * @method Result listDecoderManifestSignals(array $args = [])
 * @method Promise listDecoderManifestSignalsAsync(array $args = [])
 * @method Result listDecoderManifests(array $args = [])
 * @method Promise listDecoderManifestsAsync(array $args = [])
 * @method Result listFleets(array $args = [])
 * @method Promise listFleetsAsync(array $args = [])
 * @method Result listFleetsForVehicle(array $args = [])
 * @method Promise listFleetsForVehicleAsync(array $args = [])
 * @method Result listModelManifestNodes(array $args = [])
 * @method Promise listModelManifestNodesAsync(array $args = [])
 * @method Result listModelManifests(array $args = [])
 * @method Promise listModelManifestsAsync(array $args = [])
 * @method Result listSignalCatalogNodes(array $args = [])
 * @method Promise listSignalCatalogNodesAsync(array $args = [])
 * @method Result listSignalCatalogs(array $args = [])
 * @method Promise listSignalCatalogsAsync(array $args = [])
 * @method Result listTagsForResource(array $args = [])
 * @method Promise listTagsForResourceAsync(array $args = [])
 * @method Result listVehicles(array $args = [])
 * @method Promise listVehiclesAsync(array $args = [])
 * @method Result listVehiclesInFleet(array $args = [])
 * @method Promise listVehiclesInFleetAsync(array $args = [])
 * @method Result putEncryptionConfiguration(array $args = [])
 * @method Promise putEncryptionConfigurationAsync(array $args = [])
 * @method Result putLoggingOptions(array $args = [])
 * @method Promise putLoggingOptionsAsync(array $args = [])
 * @method Result registerAccount(array $args = [])
 * @method Promise registerAccountAsync(array $args = [])
 * @method Result tagResource(array $args = [])
 * @method Promise tagResourceAsync(array $args = [])
 * @method Result untagResource(array $args = [])
 * @method Promise untagResourceAsync(array $args = [])
 * @method Result updateCampaign(array $args = [])
 * @method Promise updateCampaignAsync(array $args = [])
 * @method Result updateDecoderManifest(array $args = [])
 * @method Promise updateDecoderManifestAsync(array $args = [])
 * @method Result updateFleet(array $args = [])
 * @method Promise updateFleetAsync(array $args = [])
 * @method Result updateModelManifest(array $args = [])
 * @method Promise updateModelManifestAsync(array $args = [])
 * @method Result updateSignalCatalog(array $args = [])
 * @method Promise updateSignalCatalogAsync(array $args = [])
 * @method Result updateVehicle(array $args = [])
 * @method Promise updateVehicleAsync(array $args = [])
 */
class IoTFleetWiseClient extends AwsClient {}
