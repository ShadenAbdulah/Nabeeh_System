<?php
namespace Aws\Swf;

use Aws\AwsClient;
use Aws\Result;
use GuzzleHttp\Promise\Promise;

/**
 * Amazon Simple Workflow Service (Amazon SWF) client.
 *
 * @method Result countClosedWorkflowExecutions(array $args = [])
 * @method Promise countClosedWorkflowExecutionsAsync(array $args = [])
 * @method Result countOpenWorkflowExecutions(array $args = [])
 * @method Promise countOpenWorkflowExecutionsAsync(array $args = [])
 * @method Result countPendingActivityTasks(array $args = [])
 * @method Promise countPendingActivityTasksAsync(array $args = [])
 * @method Result countPendingDecisionTasks(array $args = [])
 * @method Promise countPendingDecisionTasksAsync(array $args = [])
 * @method Result deprecateActivityType(array $args = [])
 * @method Promise deprecateActivityTypeAsync(array $args = [])
 * @method Result deprecateDomain(array $args = [])
 * @method Promise deprecateDomainAsync(array $args = [])
 * @method Result deprecateWorkflowType(array $args = [])
 * @method Promise deprecateWorkflowTypeAsync(array $args = [])
 * @method Result describeActivityType(array $args = [])
 * @method Promise describeActivityTypeAsync(array $args = [])
 * @method Result describeDomain(array $args = [])
 * @method Promise describeDomainAsync(array $args = [])
 * @method Result describeWorkflowExecution(array $args = [])
 * @method Promise describeWorkflowExecutionAsync(array $args = [])
 * @method Result describeWorkflowType(array $args = [])
 * @method Promise describeWorkflowTypeAsync(array $args = [])
 * @method Result getWorkflowExecutionHistory(array $args = [])
 * @method Promise getWorkflowExecutionHistoryAsync(array $args = [])
 * @method Result listActivityTypes(array $args = [])
 * @method Promise listActivityTypesAsync(array $args = [])
 * @method Result listClosedWorkflowExecutions(array $args = [])
 * @method Promise listClosedWorkflowExecutionsAsync(array $args = [])
 * @method Result listDomains(array $args = [])
 * @method Promise listDomainsAsync(array $args = [])
 * @method Result listOpenWorkflowExecutions(array $args = [])
 * @method Promise listOpenWorkflowExecutionsAsync(array $args = [])
 * @method Result listTagsForResource(array $args = [])
 * @method Promise listTagsForResourceAsync(array $args = [])
 * @method Result listWorkflowTypes(array $args = [])
 * @method Promise listWorkflowTypesAsync(array $args = [])
 * @method Result pollForActivityTask(array $args = [])
 * @method Promise pollForActivityTaskAsync(array $args = [])
 * @method Result pollForDecisionTask(array $args = [])
 * @method Promise pollForDecisionTaskAsync(array $args = [])
 * @method Result recordActivityTaskHeartbeat(array $args = [])
 * @method Promise recordActivityTaskHeartbeatAsync(array $args = [])
 * @method Result registerActivityType(array $args = [])
 * @method Promise registerActivityTypeAsync(array $args = [])
 * @method Result registerDomain(array $args = [])
 * @method Promise registerDomainAsync(array $args = [])
 * @method Result registerWorkflowType(array $args = [])
 * @method Promise registerWorkflowTypeAsync(array $args = [])
 * @method Result requestCancelWorkflowExecution(array $args = [])
 * @method Promise requestCancelWorkflowExecutionAsync(array $args = [])
 * @method Result respondActivityTaskCanceled(array $args = [])
 * @method Promise respondActivityTaskCanceledAsync(array $args = [])
 * @method Result respondActivityTaskCompleted(array $args = [])
 * @method Promise respondActivityTaskCompletedAsync(array $args = [])
 * @method Result respondActivityTaskFailed(array $args = [])
 * @method Promise respondActivityTaskFailedAsync(array $args = [])
 * @method Result respondDecisionTaskCompleted(array $args = [])
 * @method Promise respondDecisionTaskCompletedAsync(array $args = [])
 * @method Result signalWorkflowExecution(array $args = [])
 * @method Promise signalWorkflowExecutionAsync(array $args = [])
 * @method Result startWorkflowExecution(array $args = [])
 * @method Promise startWorkflowExecutionAsync(array $args = [])
 * @method Result tagResource(array $args = [])
 * @method Promise tagResourceAsync(array $args = [])
 * @method Result terminateWorkflowExecution(array $args = [])
 * @method Promise terminateWorkflowExecutionAsync(array $args = [])
 * @method Result undeprecateActivityType(array $args = [])
 * @method Promise undeprecateActivityTypeAsync(array $args = [])
 * @method Result undeprecateDomain(array $args = [])
 * @method Promise undeprecateDomainAsync(array $args = [])
 * @method Result undeprecateWorkflowType(array $args = [])
 * @method Promise undeprecateWorkflowTypeAsync(array $args = [])
 * @method Result untagResource(array $args = [])
 * @method Promise untagResourceAsync(array $args = [])
 */
class SwfClient extends AwsClient {}
