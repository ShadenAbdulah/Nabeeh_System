<?php
namespace Aws\AutoScaling;

use Aws\AwsClient;
use Aws\Result;
use GuzzleHttp\Promise\Promise;

/**
 * Auto Scaling client.
 *
 * @method Result attachInstances(array $args = [])
 * @method Promise attachInstancesAsync(array $args = [])
 * @method Result attachLoadBalancerTargetGroups(array $args = [])
 * @method Promise attachLoadBalancerTargetGroupsAsync(array $args = [])
 * @method Result attachLoadBalancers(array $args = [])
 * @method Promise attachLoadBalancersAsync(array $args = [])
 * @method Result attachTrafficSources(array $args = [])
 * @method Promise attachTrafficSourcesAsync(array $args = [])
 * @method Result batchDeleteScheduledAction(array $args = [])
 * @method Promise batchDeleteScheduledActionAsync(array $args = [])
 * @method Result batchPutScheduledUpdateGroupAction(array $args = [])
 * @method Promise batchPutScheduledUpdateGroupActionAsync(array $args = [])
 * @method Result cancelInstanceRefresh(array $args = [])
 * @method Promise cancelInstanceRefreshAsync(array $args = [])
 * @method Result completeLifecycleAction(array $args = [])
 * @method Promise completeLifecycleActionAsync(array $args = [])
 * @method Result createAutoScalingGroup(array $args = [])
 * @method Promise createAutoScalingGroupAsync(array $args = [])
 * @method Result createLaunchConfiguration(array $args = [])
 * @method Promise createLaunchConfigurationAsync(array $args = [])
 * @method Result createOrUpdateTags(array $args = [])
 * @method Promise createOrUpdateTagsAsync(array $args = [])
 * @method Result deleteAutoScalingGroup(array $args = [])
 * @method Promise deleteAutoScalingGroupAsync(array $args = [])
 * @method Result deleteLaunchConfiguration(array $args = [])
 * @method Promise deleteLaunchConfigurationAsync(array $args = [])
 * @method Result deleteLifecycleHook(array $args = [])
 * @method Promise deleteLifecycleHookAsync(array $args = [])
 * @method Result deleteNotificationConfiguration(array $args = [])
 * @method Promise deleteNotificationConfigurationAsync(array $args = [])
 * @method Result deletePolicy(array $args = [])
 * @method Promise deletePolicyAsync(array $args = [])
 * @method Result deleteScheduledAction(array $args = [])
 * @method Promise deleteScheduledActionAsync(array $args = [])
 * @method Result deleteTags(array $args = [])
 * @method Promise deleteTagsAsync(array $args = [])
 * @method Result deleteWarmPool(array $args = [])
 * @method Promise deleteWarmPoolAsync(array $args = [])
 * @method Result describeAccountLimits(array $args = [])
 * @method Promise describeAccountLimitsAsync(array $args = [])
 * @method Result describeAdjustmentTypes(array $args = [])
 * @method Promise describeAdjustmentTypesAsync(array $args = [])
 * @method Result describeAutoScalingGroups(array $args = [])
 * @method Promise describeAutoScalingGroupsAsync(array $args = [])
 * @method Result describeAutoScalingInstances(array $args = [])
 * @method Promise describeAutoScalingInstancesAsync(array $args = [])
 * @method Result describeAutoScalingNotificationTypes(array $args = [])
 * @method Promise describeAutoScalingNotificationTypesAsync(array $args = [])
 * @method Result describeInstanceRefreshes(array $args = [])
 * @method Promise describeInstanceRefreshesAsync(array $args = [])
 * @method Result describeLaunchConfigurations(array $args = [])
 * @method Promise describeLaunchConfigurationsAsync(array $args = [])
 * @method Result describeLifecycleHookTypes(array $args = [])
 * @method Promise describeLifecycleHookTypesAsync(array $args = [])
 * @method Result describeLifecycleHooks(array $args = [])
 * @method Promise describeLifecycleHooksAsync(array $args = [])
 * @method Result describeLoadBalancerTargetGroups(array $args = [])
 * @method Promise describeLoadBalancerTargetGroupsAsync(array $args = [])
 * @method Result describeLoadBalancers(array $args = [])
 * @method Promise describeLoadBalancersAsync(array $args = [])
 * @method Result describeMetricCollectionTypes(array $args = [])
 * @method Promise describeMetricCollectionTypesAsync(array $args = [])
 * @method Result describeNotificationConfigurations(array $args = [])
 * @method Promise describeNotificationConfigurationsAsync(array $args = [])
 * @method Result describePolicies(array $args = [])
 * @method Promise describePoliciesAsync(array $args = [])
 * @method Result describeScalingActivities(array $args = [])
 * @method Promise describeScalingActivitiesAsync(array $args = [])
 * @method Result describeScalingProcessTypes(array $args = [])
 * @method Promise describeScalingProcessTypesAsync(array $args = [])
 * @method Result describeScheduledActions(array $args = [])
 * @method Promise describeScheduledActionsAsync(array $args = [])
 * @method Result describeTags(array $args = [])
 * @method Promise describeTagsAsync(array $args = [])
 * @method Result describeTerminationPolicyTypes(array $args = [])
 * @method Promise describeTerminationPolicyTypesAsync(array $args = [])
 * @method Result describeTrafficSources(array $args = [])
 * @method Promise describeTrafficSourcesAsync(array $args = [])
 * @method Result describeWarmPool(array $args = [])
 * @method Promise describeWarmPoolAsync(array $args = [])
 * @method Result detachInstances(array $args = [])
 * @method Promise detachInstancesAsync(array $args = [])
 * @method Result detachLoadBalancerTargetGroups(array $args = [])
 * @method Promise detachLoadBalancerTargetGroupsAsync(array $args = [])
 * @method Result detachLoadBalancers(array $args = [])
 * @method Promise detachLoadBalancersAsync(array $args = [])
 * @method Result detachTrafficSources(array $args = [])
 * @method Promise detachTrafficSourcesAsync(array $args = [])
 * @method Result disableMetricsCollection(array $args = [])
 * @method Promise disableMetricsCollectionAsync(array $args = [])
 * @method Result enableMetricsCollection(array $args = [])
 * @method Promise enableMetricsCollectionAsync(array $args = [])
 * @method Result enterStandby(array $args = [])
 * @method Promise enterStandbyAsync(array $args = [])
 * @method Result executePolicy(array $args = [])
 * @method Promise executePolicyAsync(array $args = [])
 * @method Result exitStandby(array $args = [])
 * @method Promise exitStandbyAsync(array $args = [])
 * @method Result getPredictiveScalingForecast(array $args = [])
 * @method Promise getPredictiveScalingForecastAsync(array $args = [])
 * @method Result putLifecycleHook(array $args = [])
 * @method Promise putLifecycleHookAsync(array $args = [])
 * @method Result putNotificationConfiguration(array $args = [])
 * @method Promise putNotificationConfigurationAsync(array $args = [])
 * @method Result putScalingPolicy(array $args = [])
 * @method Promise putScalingPolicyAsync(array $args = [])
 * @method Result putScheduledUpdateGroupAction(array $args = [])
 * @method Promise putScheduledUpdateGroupActionAsync(array $args = [])
 * @method Result putWarmPool(array $args = [])
 * @method Promise putWarmPoolAsync(array $args = [])
 * @method Result recordLifecycleActionHeartbeat(array $args = [])
 * @method Promise recordLifecycleActionHeartbeatAsync(array $args = [])
 * @method Result resumeProcesses(array $args = [])
 * @method Promise resumeProcessesAsync(array $args = [])
 * @method Result rollbackInstanceRefresh(array $args = [])
 * @method Promise rollbackInstanceRefreshAsync(array $args = [])
 * @method Result setDesiredCapacity(array $args = [])
 * @method Promise setDesiredCapacityAsync(array $args = [])
 * @method Result setInstanceHealth(array $args = [])
 * @method Promise setInstanceHealthAsync(array $args = [])
 * @method Result setInstanceProtection(array $args = [])
 * @method Promise setInstanceProtectionAsync(array $args = [])
 * @method Result startInstanceRefresh(array $args = [])
 * @method Promise startInstanceRefreshAsync(array $args = [])
 * @method Result suspendProcesses(array $args = [])
 * @method Promise suspendProcessesAsync(array $args = [])
 * @method Result terminateInstanceInAutoScalingGroup(array $args = [])
 * @method Promise terminateInstanceInAutoScalingGroupAsync(array $args = [])
 * @method Result updateAutoScalingGroup(array $args = [])
 * @method Promise updateAutoScalingGroupAsync(array $args = [])
 */
class AutoScalingClient extends AwsClient {}
