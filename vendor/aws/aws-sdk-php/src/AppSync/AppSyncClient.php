<?php
namespace Aws\AppSync;

use Aws\AwsClient;
use Aws\Result;
use GuzzleHttp\Promise\Promise;

/**
 * This client is used to interact with the **AWS AppSync** service.
 * @method Result associateApi(array $args = [])
 * @method Promise associateApiAsync(array $args = [])
 * @method Result associateMergedGraphqlApi(array $args = [])
 * @method Promise associateMergedGraphqlApiAsync(array $args = [])
 * @method Result associateSourceGraphqlApi(array $args = [])
 * @method Promise associateSourceGraphqlApiAsync(array $args = [])
 * @method Result createApiCache(array $args = [])
 * @method Promise createApiCacheAsync(array $args = [])
 * @method Result createApiKey(array $args = [])
 * @method Promise createApiKeyAsync(array $args = [])
 * @method Result createDataSource(array $args = [])
 * @method Promise createDataSourceAsync(array $args = [])
 * @method Result createDomainName(array $args = [])
 * @method Promise createDomainNameAsync(array $args = [])
 * @method Result createFunction(array $args = [])
 * @method Promise createFunctionAsync(array $args = [])
 * @method Result createGraphqlApi(array $args = [])
 * @method Promise createGraphqlApiAsync(array $args = [])
 * @method Result createResolver(array $args = [])
 * @method Promise createResolverAsync(array $args = [])
 * @method Result createType(array $args = [])
 * @method Promise createTypeAsync(array $args = [])
 * @method Result deleteApiCache(array $args = [])
 * @method Promise deleteApiCacheAsync(array $args = [])
 * @method Result deleteApiKey(array $args = [])
 * @method Promise deleteApiKeyAsync(array $args = [])
 * @method Result deleteDataSource(array $args = [])
 * @method Promise deleteDataSourceAsync(array $args = [])
 * @method Result deleteDomainName(array $args = [])
 * @method Promise deleteDomainNameAsync(array $args = [])
 * @method Result deleteFunction(array $args = [])
 * @method Promise deleteFunctionAsync(array $args = [])
 * @method Result deleteGraphqlApi(array $args = [])
 * @method Promise deleteGraphqlApiAsync(array $args = [])
 * @method Result deleteResolver(array $args = [])
 * @method Promise deleteResolverAsync(array $args = [])
 * @method Result deleteType(array $args = [])
 * @method Promise deleteTypeAsync(array $args = [])
 * @method Result disassociateApi(array $args = [])
 * @method Promise disassociateApiAsync(array $args = [])
 * @method Result disassociateMergedGraphqlApi(array $args = [])
 * @method Promise disassociateMergedGraphqlApiAsync(array $args = [])
 * @method Result disassociateSourceGraphqlApi(array $args = [])
 * @method Promise disassociateSourceGraphqlApiAsync(array $args = [])
 * @method Result evaluateCode(array $args = [])
 * @method Promise evaluateCodeAsync(array $args = [])
 * @method Result evaluateMappingTemplate(array $args = [])
 * @method Promise evaluateMappingTemplateAsync(array $args = [])
 * @method Result flushApiCache(array $args = [])
 * @method Promise flushApiCacheAsync(array $args = [])
 * @method Result getApiAssociation(array $args = [])
 * @method Promise getApiAssociationAsync(array $args = [])
 * @method Result getApiCache(array $args = [])
 * @method Promise getApiCacheAsync(array $args = [])
 * @method Result getDataSource(array $args = [])
 * @method Promise getDataSourceAsync(array $args = [])
 * @method Result getDataSourceIntrospection(array $args = [])
 * @method Promise getDataSourceIntrospectionAsync(array $args = [])
 * @method Result getDomainName(array $args = [])
 * @method Promise getDomainNameAsync(array $args = [])
 * @method Result getFunction(array $args = [])
 * @method Promise getFunctionAsync(array $args = [])
 * @method Result getGraphqlApi(array $args = [])
 * @method Promise getGraphqlApiAsync(array $args = [])
 * @method Result getGraphqlApiEnvironmentVariables(array $args = [])
 * @method Promise getGraphqlApiEnvironmentVariablesAsync(array $args = [])
 * @method Result getIntrospectionSchema(array $args = [])
 * @method Promise getIntrospectionSchemaAsync(array $args = [])
 * @method Result getResolver(array $args = [])
 * @method Promise getResolverAsync(array $args = [])
 * @method Result getSchemaCreationStatus(array $args = [])
 * @method Promise getSchemaCreationStatusAsync(array $args = [])
 * @method Result getSourceApiAssociation(array $args = [])
 * @method Promise getSourceApiAssociationAsync(array $args = [])
 * @method Result getType(array $args = [])
 * @method Promise getTypeAsync(array $args = [])
 * @method Result listApiKeys(array $args = [])
 * @method Promise listApiKeysAsync(array $args = [])
 * @method Result listDataSources(array $args = [])
 * @method Promise listDataSourcesAsync(array $args = [])
 * @method Result listDomainNames(array $args = [])
 * @method Promise listDomainNamesAsync(array $args = [])
 * @method Result listFunctions(array $args = [])
 * @method Promise listFunctionsAsync(array $args = [])
 * @method Result listGraphqlApis(array $args = [])
 * @method Promise listGraphqlApisAsync(array $args = [])
 * @method Result listResolvers(array $args = [])
 * @method Promise listResolversAsync(array $args = [])
 * @method Result listResolversByFunction(array $args = [])
 * @method Promise listResolversByFunctionAsync(array $args = [])
 * @method Result listSourceApiAssociations(array $args = [])
 * @method Promise listSourceApiAssociationsAsync(array $args = [])
 * @method Result listTagsForResource(array $args = [])
 * @method Promise listTagsForResourceAsync(array $args = [])
 * @method Result listTypes(array $args = [])
 * @method Promise listTypesAsync(array $args = [])
 * @method Result listTypesByAssociation(array $args = [])
 * @method Promise listTypesByAssociationAsync(array $args = [])
 * @method Result putGraphqlApiEnvironmentVariables(array $args = [])
 * @method Promise putGraphqlApiEnvironmentVariablesAsync(array $args = [])
 * @method Result startDataSourceIntrospection(array $args = [])
 * @method Promise startDataSourceIntrospectionAsync(array $args = [])
 * @method Result startSchemaCreation(array $args = [])
 * @method Promise startSchemaCreationAsync(array $args = [])
 * @method Result startSchemaMerge(array $args = [])
 * @method Promise startSchemaMergeAsync(array $args = [])
 * @method Result tagResource(array $args = [])
 * @method Promise tagResourceAsync(array $args = [])
 * @method Result untagResource(array $args = [])
 * @method Promise untagResourceAsync(array $args = [])
 * @method Result updateApiCache(array $args = [])
 * @method Promise updateApiCacheAsync(array $args = [])
 * @method Result updateApiKey(array $args = [])
 * @method Promise updateApiKeyAsync(array $args = [])
 * @method Result updateDataSource(array $args = [])
 * @method Promise updateDataSourceAsync(array $args = [])
 * @method Result updateDomainName(array $args = [])
 * @method Promise updateDomainNameAsync(array $args = [])
 * @method Result updateFunction(array $args = [])
 * @method Promise updateFunctionAsync(array $args = [])
 * @method Result updateGraphqlApi(array $args = [])
 * @method Promise updateGraphqlApiAsync(array $args = [])
 * @method Result updateResolver(array $args = [])
 * @method Promise updateResolverAsync(array $args = [])
 * @method Result updateSourceApiAssociation(array $args = [])
 * @method Promise updateSourceApiAssociationAsync(array $args = [])
 * @method Result updateType(array $args = [])
 * @method Promise updateTypeAsync(array $args = [])
 */
class AppSyncClient extends AwsClient {}
