<?php
namespace Aws\CloudTrail;

use Aws\AwsClient;
use Aws\Result;
use GuzzleHttp\Promise\Promise;

/**
 * This client is used to interact with the **AWS CloudTrail** service.
 *
 * @method Result addTags(array $args = [])
 * @method Promise addTagsAsync(array $args = [])
 * @method Result cancelQuery(array $args = [])
 * @method Promise cancelQueryAsync(array $args = [])
 * @method Result createChannel(array $args = [])
 * @method Promise createChannelAsync(array $args = [])
 * @method Result createEventDataStore(array $args = [])
 * @method Promise createEventDataStoreAsync(array $args = [])
 * @method Result createTrail(array $args = [])
 * @method Promise createTrailAsync(array $args = [])
 * @method Result deleteChannel(array $args = [])
 * @method Promise deleteChannelAsync(array $args = [])
 * @method Result deleteEventDataStore(array $args = [])
 * @method Promise deleteEventDataStoreAsync(array $args = [])
 * @method Result deleteResourcePolicy(array $args = [])
 * @method Promise deleteResourcePolicyAsync(array $args = [])
 * @method Result deleteTrail(array $args = [])
 * @method Promise deleteTrailAsync(array $args = [])
 * @method Result deregisterOrganizationDelegatedAdmin(array $args = [])
 * @method Promise deregisterOrganizationDelegatedAdminAsync(array $args = [])
 * @method Result describeQuery(array $args = [])
 * @method Promise describeQueryAsync(array $args = [])
 * @method Result describeTrails(array $args = [])
 * @method Promise describeTrailsAsync(array $args = [])
 * @method Result disableFederation(array $args = [])
 * @method Promise disableFederationAsync(array $args = [])
 * @method Result enableFederation(array $args = [])
 * @method Promise enableFederationAsync(array $args = [])
 * @method Result getChannel(array $args = [])
 * @method Promise getChannelAsync(array $args = [])
 * @method Result getEventDataStore(array $args = [])
 * @method Promise getEventDataStoreAsync(array $args = [])
 * @method Result getEventSelectors(array $args = [])
 * @method Promise getEventSelectorsAsync(array $args = [])
 * @method Result getImport(array $args = [])
 * @method Promise getImportAsync(array $args = [])
 * @method Result getInsightSelectors(array $args = [])
 * @method Promise getInsightSelectorsAsync(array $args = [])
 * @method Result getQueryResults(array $args = [])
 * @method Promise getQueryResultsAsync(array $args = [])
 * @method Result getResourcePolicy(array $args = [])
 * @method Promise getResourcePolicyAsync(array $args = [])
 * @method Result getTrail(array $args = [])
 * @method Promise getTrailAsync(array $args = [])
 * @method Result getTrailStatus(array $args = [])
 * @method Promise getTrailStatusAsync(array $args = [])
 * @method Result listChannels(array $args = [])
 * @method Promise listChannelsAsync(array $args = [])
 * @method Result listEventDataStores(array $args = [])
 * @method Promise listEventDataStoresAsync(array $args = [])
 * @method Result listImportFailures(array $args = [])
 * @method Promise listImportFailuresAsync(array $args = [])
 * @method Result listImports(array $args = [])
 * @method Promise listImportsAsync(array $args = [])
 * @method Result listInsightsMetricData(array $args = [])
 * @method Promise listInsightsMetricDataAsync(array $args = [])
 * @method Result listPublicKeys(array $args = [])
 * @method Promise listPublicKeysAsync(array $args = [])
 * @method Result listQueries(array $args = [])
 * @method Promise listQueriesAsync(array $args = [])
 * @method Result listTags(array $args = [])
 * @method Promise listTagsAsync(array $args = [])
 * @method Result listTrails(array $args = [])
 * @method Promise listTrailsAsync(array $args = [])
 * @method Result lookupEvents(array $args = [])
 * @method Promise lookupEventsAsync(array $args = [])
 * @method Result putEventSelectors(array $args = [])
 * @method Promise putEventSelectorsAsync(array $args = [])
 * @method Result putInsightSelectors(array $args = [])
 * @method Promise putInsightSelectorsAsync(array $args = [])
 * @method Result putResourcePolicy(array $args = [])
 * @method Promise putResourcePolicyAsync(array $args = [])
 * @method Result registerOrganizationDelegatedAdmin(array $args = [])
 * @method Promise registerOrganizationDelegatedAdminAsync(array $args = [])
 * @method Result removeTags(array $args = [])
 * @method Promise removeTagsAsync(array $args = [])
 * @method Result restoreEventDataStore(array $args = [])
 * @method Promise restoreEventDataStoreAsync(array $args = [])
 * @method Result startEventDataStoreIngestion(array $args = [])
 * @method Promise startEventDataStoreIngestionAsync(array $args = [])
 * @method Result startImport(array $args = [])
 * @method Promise startImportAsync(array $args = [])
 * @method Result startLogging(array $args = [])
 * @method Promise startLoggingAsync(array $args = [])
 * @method Result startQuery(array $args = [])
 * @method Promise startQueryAsync(array $args = [])
 * @method Result stopEventDataStoreIngestion(array $args = [])
 * @method Promise stopEventDataStoreIngestionAsync(array $args = [])
 * @method Result stopImport(array $args = [])
 * @method Promise stopImportAsync(array $args = [])
 * @method Result stopLogging(array $args = [])
 * @method Promise stopLoggingAsync(array $args = [])
 * @method Result updateChannel(array $args = [])
 * @method Promise updateChannelAsync(array $args = [])
 * @method Result updateEventDataStore(array $args = [])
 * @method Promise updateEventDataStoreAsync(array $args = [])
 * @method Result updateTrail(array $args = [])
 * @method Promise updateTrailAsync(array $args = [])
 */
class CloudTrailClient extends AwsClient {}
