<?php
namespace Aws\MemoryDB;

use Aws\AwsClient;
use Aws\Result;
use GuzzleHttp\Promise\Promise;

/**
 * This client is used to interact with the **Amazon MemoryDB** service.
 * @method Result batchUpdateCluster(array $args = [])
 * @method Promise batchUpdateClusterAsync(array $args = [])
 * @method Result copySnapshot(array $args = [])
 * @method Promise copySnapshotAsync(array $args = [])
 * @method Result createACL(array $args = [])
 * @method Promise createACLAsync(array $args = [])
 * @method Result createCluster(array $args = [])
 * @method Promise createClusterAsync(array $args = [])
 * @method Result createParameterGroup(array $args = [])
 * @method Promise createParameterGroupAsync(array $args = [])
 * @method Result createSnapshot(array $args = [])
 * @method Promise createSnapshotAsync(array $args = [])
 * @method Result createSubnetGroup(array $args = [])
 * @method Promise createSubnetGroupAsync(array $args = [])
 * @method Result createUser(array $args = [])
 * @method Promise createUserAsync(array $args = [])
 * @method Result deleteACL(array $args = [])
 * @method Promise deleteACLAsync(array $args = [])
 * @method Result deleteCluster(array $args = [])
 * @method Promise deleteClusterAsync(array $args = [])
 * @method Result deleteParameterGroup(array $args = [])
 * @method Promise deleteParameterGroupAsync(array $args = [])
 * @method Result deleteSnapshot(array $args = [])
 * @method Promise deleteSnapshotAsync(array $args = [])
 * @method Result deleteSubnetGroup(array $args = [])
 * @method Promise deleteSubnetGroupAsync(array $args = [])
 * @method Result deleteUser(array $args = [])
 * @method Promise deleteUserAsync(array $args = [])
 * @method Result describeACLs(array $args = [])
 * @method Promise describeACLsAsync(array $args = [])
 * @method Result describeClusters(array $args = [])
 * @method Promise describeClustersAsync(array $args = [])
 * @method Result describeEngineVersions(array $args = [])
 * @method Promise describeEngineVersionsAsync(array $args = [])
 * @method Result describeEvents(array $args = [])
 * @method Promise describeEventsAsync(array $args = [])
 * @method Result describeParameterGroups(array $args = [])
 * @method Promise describeParameterGroupsAsync(array $args = [])
 * @method Result describeParameters(array $args = [])
 * @method Promise describeParametersAsync(array $args = [])
 * @method Result describeReservedNodes(array $args = [])
 * @method Promise describeReservedNodesAsync(array $args = [])
 * @method Result describeReservedNodesOfferings(array $args = [])
 * @method Promise describeReservedNodesOfferingsAsync(array $args = [])
 * @method Result describeServiceUpdates(array $args = [])
 * @method Promise describeServiceUpdatesAsync(array $args = [])
 * @method Result describeSnapshots(array $args = [])
 * @method Promise describeSnapshotsAsync(array $args = [])
 * @method Result describeSubnetGroups(array $args = [])
 * @method Promise describeSubnetGroupsAsync(array $args = [])
 * @method Result describeUsers(array $args = [])
 * @method Promise describeUsersAsync(array $args = [])
 * @method Result failoverShard(array $args = [])
 * @method Promise failoverShardAsync(array $args = [])
 * @method Result listAllowedNodeTypeUpdates(array $args = [])
 * @method Promise listAllowedNodeTypeUpdatesAsync(array $args = [])
 * @method Result listTags(array $args = [])
 * @method Promise listTagsAsync(array $args = [])
 * @method Result purchaseReservedNodesOffering(array $args = [])
 * @method Promise purchaseReservedNodesOfferingAsync(array $args = [])
 * @method Result resetParameterGroup(array $args = [])
 * @method Promise resetParameterGroupAsync(array $args = [])
 * @method Result tagResource(array $args = [])
 * @method Promise tagResourceAsync(array $args = [])
 * @method Result untagResource(array $args = [])
 * @method Promise untagResourceAsync(array $args = [])
 * @method Result updateACL(array $args = [])
 * @method Promise updateACLAsync(array $args = [])
 * @method Result updateCluster(array $args = [])
 * @method Promise updateClusterAsync(array $args = [])
 * @method Result updateParameterGroup(array $args = [])
 * @method Promise updateParameterGroupAsync(array $args = [])
 * @method Result updateSubnetGroup(array $args = [])
 * @method Promise updateSubnetGroupAsync(array $args = [])
 * @method Result updateUser(array $args = [])
 * @method Promise updateUserAsync(array $args = [])
 */
class MemoryDBClient extends AwsClient {}
