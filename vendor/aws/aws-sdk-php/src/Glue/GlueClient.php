<?php
namespace Aws\Glue;

use Aws\AwsClient;
use Aws\Result;
use GuzzleHttp\Promise\Promise;

/**
 * This client is used to interact with the **AWS Glue** service.
 * @method Result batchCreatePartition(array $args = [])
 * @method Promise batchCreatePartitionAsync(array $args = [])
 * @method Result batchDeleteConnection(array $args = [])
 * @method Promise batchDeleteConnectionAsync(array $args = [])
 * @method Result batchDeletePartition(array $args = [])
 * @method Promise batchDeletePartitionAsync(array $args = [])
 * @method Result batchDeleteTable(array $args = [])
 * @method Promise batchDeleteTableAsync(array $args = [])
 * @method Result batchDeleteTableVersion(array $args = [])
 * @method Promise batchDeleteTableVersionAsync(array $args = [])
 * @method Result batchGetBlueprints(array $args = [])
 * @method Promise batchGetBlueprintsAsync(array $args = [])
 * @method Result batchGetCrawlers(array $args = [])
 * @method Promise batchGetCrawlersAsync(array $args = [])
 * @method Result batchGetCustomEntityTypes(array $args = [])
 * @method Promise batchGetCustomEntityTypesAsync(array $args = [])
 * @method Result batchGetDataQualityResult(array $args = [])
 * @method Promise batchGetDataQualityResultAsync(array $args = [])
 * @method Result batchGetDevEndpoints(array $args = [])
 * @method Promise batchGetDevEndpointsAsync(array $args = [])
 * @method Result batchGetJobs(array $args = [])
 * @method Promise batchGetJobsAsync(array $args = [])
 * @method Result batchGetPartition(array $args = [])
 * @method Promise batchGetPartitionAsync(array $args = [])
 * @method Result batchGetTableOptimizer(array $args = [])
 * @method Promise batchGetTableOptimizerAsync(array $args = [])
 * @method Result batchGetTriggers(array $args = [])
 * @method Promise batchGetTriggersAsync(array $args = [])
 * @method Result batchGetWorkflows(array $args = [])
 * @method Promise batchGetWorkflowsAsync(array $args = [])
 * @method Result batchStopJobRun(array $args = [])
 * @method Promise batchStopJobRunAsync(array $args = [])
 * @method Result batchUpdatePartition(array $args = [])
 * @method Promise batchUpdatePartitionAsync(array $args = [])
 * @method Result cancelDataQualityRuleRecommendationRun(array $args = [])
 * @method Promise cancelDataQualityRuleRecommendationRunAsync(array $args = [])
 * @method Result cancelDataQualityRulesetEvaluationRun(array $args = [])
 * @method Promise cancelDataQualityRulesetEvaluationRunAsync(array $args = [])
 * @method Result cancelMLTaskRun(array $args = [])
 * @method Promise cancelMLTaskRunAsync(array $args = [])
 * @method Result cancelStatement(array $args = [])
 * @method Promise cancelStatementAsync(array $args = [])
 * @method Result checkSchemaVersionValidity(array $args = [])
 * @method Promise checkSchemaVersionValidityAsync(array $args = [])
 * @method Result createBlueprint(array $args = [])
 * @method Promise createBlueprintAsync(array $args = [])
 * @method Result createClassifier(array $args = [])
 * @method Promise createClassifierAsync(array $args = [])
 * @method Result createConnection(array $args = [])
 * @method Promise createConnectionAsync(array $args = [])
 * @method Result createCrawler(array $args = [])
 * @method Promise createCrawlerAsync(array $args = [])
 * @method Result createCustomEntityType(array $args = [])
 * @method Promise createCustomEntityTypeAsync(array $args = [])
 * @method Result createDataQualityRuleset(array $args = [])
 * @method Promise createDataQualityRulesetAsync(array $args = [])
 * @method Result createDatabase(array $args = [])
 * @method Promise createDatabaseAsync(array $args = [])
 * @method Result createDevEndpoint(array $args = [])
 * @method Promise createDevEndpointAsync(array $args = [])
 * @method Result createJob(array $args = [])
 * @method Promise createJobAsync(array $args = [])
 * @method Result createMLTransform(array $args = [])
 * @method Promise createMLTransformAsync(array $args = [])
 * @method Result createPartition(array $args = [])
 * @method Promise createPartitionAsync(array $args = [])
 * @method Result createPartitionIndex(array $args = [])
 * @method Promise createPartitionIndexAsync(array $args = [])
 * @method Result createRegistry(array $args = [])
 * @method Promise createRegistryAsync(array $args = [])
 * @method Result createSchema(array $args = [])
 * @method Promise createSchemaAsync(array $args = [])
 * @method Result createScript(array $args = [])
 * @method Promise createScriptAsync(array $args = [])
 * @method Result createSecurityConfiguration(array $args = [])
 * @method Promise createSecurityConfigurationAsync(array $args = [])
 * @method Result createSession(array $args = [])
 * @method Promise createSessionAsync(array $args = [])
 * @method Result createTable(array $args = [])
 * @method Promise createTableAsync(array $args = [])
 * @method Result createTableOptimizer(array $args = [])
 * @method Promise createTableOptimizerAsync(array $args = [])
 * @method Result createTrigger(array $args = [])
 * @method Promise createTriggerAsync(array $args = [])
 * @method Result createUserDefinedFunction(array $args = [])
 * @method Promise createUserDefinedFunctionAsync(array $args = [])
 * @method Result createWorkflow(array $args = [])
 * @method Promise createWorkflowAsync(array $args = [])
 * @method Result deleteBlueprint(array $args = [])
 * @method Promise deleteBlueprintAsync(array $args = [])
 * @method Result deleteClassifier(array $args = [])
 * @method Promise deleteClassifierAsync(array $args = [])
 * @method Result deleteColumnStatisticsForPartition(array $args = [])
 * @method Promise deleteColumnStatisticsForPartitionAsync(array $args = [])
 * @method Result deleteColumnStatisticsForTable(array $args = [])
 * @method Promise deleteColumnStatisticsForTableAsync(array $args = [])
 * @method Result deleteConnection(array $args = [])
 * @method Promise deleteConnectionAsync(array $args = [])
 * @method Result deleteCrawler(array $args = [])
 * @method Promise deleteCrawlerAsync(array $args = [])
 * @method Result deleteCustomEntityType(array $args = [])
 * @method Promise deleteCustomEntityTypeAsync(array $args = [])
 * @method Result deleteDataQualityRuleset(array $args = [])
 * @method Promise deleteDataQualityRulesetAsync(array $args = [])
 * @method Result deleteDatabase(array $args = [])
 * @method Promise deleteDatabaseAsync(array $args = [])
 * @method Result deleteDevEndpoint(array $args = [])
 * @method Promise deleteDevEndpointAsync(array $args = [])
 * @method Result deleteJob(array $args = [])
 * @method Promise deleteJobAsync(array $args = [])
 * @method Result deleteMLTransform(array $args = [])
 * @method Promise deleteMLTransformAsync(array $args = [])
 * @method Result deletePartition(array $args = [])
 * @method Promise deletePartitionAsync(array $args = [])
 * @method Result deletePartitionIndex(array $args = [])
 * @method Promise deletePartitionIndexAsync(array $args = [])
 * @method Result deleteRegistry(array $args = [])
 * @method Promise deleteRegistryAsync(array $args = [])
 * @method Result deleteResourcePolicy(array $args = [])
 * @method Promise deleteResourcePolicyAsync(array $args = [])
 * @method Result deleteSchema(array $args = [])
 * @method Promise deleteSchemaAsync(array $args = [])
 * @method Result deleteSchemaVersions(array $args = [])
 * @method Promise deleteSchemaVersionsAsync(array $args = [])
 * @method Result deleteSecurityConfiguration(array $args = [])
 * @method Promise deleteSecurityConfigurationAsync(array $args = [])
 * @method Result deleteSession(array $args = [])
 * @method Promise deleteSessionAsync(array $args = [])
 * @method Result deleteTable(array $args = [])
 * @method Promise deleteTableAsync(array $args = [])
 * @method Result deleteTableOptimizer(array $args = [])
 * @method Promise deleteTableOptimizerAsync(array $args = [])
 * @method Result deleteTableVersion(array $args = [])
 * @method Promise deleteTableVersionAsync(array $args = [])
 * @method Result deleteTrigger(array $args = [])
 * @method Promise deleteTriggerAsync(array $args = [])
 * @method Result deleteUserDefinedFunction(array $args = [])
 * @method Promise deleteUserDefinedFunctionAsync(array $args = [])
 * @method Result deleteWorkflow(array $args = [])
 * @method Promise deleteWorkflowAsync(array $args = [])
 * @method Result getBlueprint(array $args = [])
 * @method Promise getBlueprintAsync(array $args = [])
 * @method Result getBlueprintRun(array $args = [])
 * @method Promise getBlueprintRunAsync(array $args = [])
 * @method Result getBlueprintRuns(array $args = [])
 * @method Promise getBlueprintRunsAsync(array $args = [])
 * @method Result getCatalogImportStatus(array $args = [])
 * @method Promise getCatalogImportStatusAsync(array $args = [])
 * @method Result getClassifier(array $args = [])
 * @method Promise getClassifierAsync(array $args = [])
 * @method Result getClassifiers(array $args = [])
 * @method Promise getClassifiersAsync(array $args = [])
 * @method Result getColumnStatisticsForPartition(array $args = [])
 * @method Promise getColumnStatisticsForPartitionAsync(array $args = [])
 * @method Result getColumnStatisticsForTable(array $args = [])
 * @method Promise getColumnStatisticsForTableAsync(array $args = [])
 * @method Result getColumnStatisticsTaskRun(array $args = [])
 * @method Promise getColumnStatisticsTaskRunAsync(array $args = [])
 * @method Result getColumnStatisticsTaskRuns(array $args = [])
 * @method Promise getColumnStatisticsTaskRunsAsync(array $args = [])
 * @method Result getConnection(array $args = [])
 * @method Promise getConnectionAsync(array $args = [])
 * @method Result getConnections(array $args = [])
 * @method Promise getConnectionsAsync(array $args = [])
 * @method Result getCrawler(array $args = [])
 * @method Promise getCrawlerAsync(array $args = [])
 * @method Result getCrawlerMetrics(array $args = [])
 * @method Promise getCrawlerMetricsAsync(array $args = [])
 * @method Result getCrawlers(array $args = [])
 * @method Promise getCrawlersAsync(array $args = [])
 * @method Result getCustomEntityType(array $args = [])
 * @method Promise getCustomEntityTypeAsync(array $args = [])
 * @method Result getDataCatalogEncryptionSettings(array $args = [])
 * @method Promise getDataCatalogEncryptionSettingsAsync(array $args = [])
 * @method Result getDataQualityResult(array $args = [])
 * @method Promise getDataQualityResultAsync(array $args = [])
 * @method Result getDataQualityRuleRecommendationRun(array $args = [])
 * @method Promise getDataQualityRuleRecommendationRunAsync(array $args = [])
 * @method Result getDataQualityRuleset(array $args = [])
 * @method Promise getDataQualityRulesetAsync(array $args = [])
 * @method Result getDataQualityRulesetEvaluationRun(array $args = [])
 * @method Promise getDataQualityRulesetEvaluationRunAsync(array $args = [])
 * @method Result getDatabase(array $args = [])
 * @method Promise getDatabaseAsync(array $args = [])
 * @method Result getDatabases(array $args = [])
 * @method Promise getDatabasesAsync(array $args = [])
 * @method Result getDataflowGraph(array $args = [])
 * @method Promise getDataflowGraphAsync(array $args = [])
 * @method Result getDevEndpoint(array $args = [])
 * @method Promise getDevEndpointAsync(array $args = [])
 * @method Result getDevEndpoints(array $args = [])
 * @method Promise getDevEndpointsAsync(array $args = [])
 * @method Result getJob(array $args = [])
 * @method Promise getJobAsync(array $args = [])
 * @method Result getJobBookmark(array $args = [])
 * @method Promise getJobBookmarkAsync(array $args = [])
 * @method Result getJobRun(array $args = [])
 * @method Promise getJobRunAsync(array $args = [])
 * @method Result getJobRuns(array $args = [])
 * @method Promise getJobRunsAsync(array $args = [])
 * @method Result getJobs(array $args = [])
 * @method Promise getJobsAsync(array $args = [])
 * @method Result getMLTaskRun(array $args = [])
 * @method Promise getMLTaskRunAsync(array $args = [])
 * @method Result getMLTaskRuns(array $args = [])
 * @method Promise getMLTaskRunsAsync(array $args = [])
 * @method Result getMLTransform(array $args = [])
 * @method Promise getMLTransformAsync(array $args = [])
 * @method Result getMLTransforms(array $args = [])
 * @method Promise getMLTransformsAsync(array $args = [])
 * @method Result getMapping(array $args = [])
 * @method Promise getMappingAsync(array $args = [])
 * @method Result getPartition(array $args = [])
 * @method Promise getPartitionAsync(array $args = [])
 * @method Result getPartitionIndexes(array $args = [])
 * @method Promise getPartitionIndexesAsync(array $args = [])
 * @method Result getPartitions(array $args = [])
 * @method Promise getPartitionsAsync(array $args = [])
 * @method Result getPlan(array $args = [])
 * @method Promise getPlanAsync(array $args = [])
 * @method Result getRegistry(array $args = [])
 * @method Promise getRegistryAsync(array $args = [])
 * @method Result getResourcePolicies(array $args = [])
 * @method Promise getResourcePoliciesAsync(array $args = [])
 * @method Result getResourcePolicy(array $args = [])
 * @method Promise getResourcePolicyAsync(array $args = [])
 * @method Result getSchema(array $args = [])
 * @method Promise getSchemaAsync(array $args = [])
 * @method Result getSchemaByDefinition(array $args = [])
 * @method Promise getSchemaByDefinitionAsync(array $args = [])
 * @method Result getSchemaVersion(array $args = [])
 * @method Promise getSchemaVersionAsync(array $args = [])
 * @method Result getSchemaVersionsDiff(array $args = [])
 * @method Promise getSchemaVersionsDiffAsync(array $args = [])
 * @method Result getSecurityConfiguration(array $args = [])
 * @method Promise getSecurityConfigurationAsync(array $args = [])
 * @method Result getSecurityConfigurations(array $args = [])
 * @method Promise getSecurityConfigurationsAsync(array $args = [])
 * @method Result getSession(array $args = [])
 * @method Promise getSessionAsync(array $args = [])
 * @method Result getStatement(array $args = [])
 * @method Promise getStatementAsync(array $args = [])
 * @method Result getTable(array $args = [])
 * @method Promise getTableAsync(array $args = [])
 * @method Result getTableOptimizer(array $args = [])
 * @method Promise getTableOptimizerAsync(array $args = [])
 * @method Result getTableVersion(array $args = [])
 * @method Promise getTableVersionAsync(array $args = [])
 * @method Result getTableVersions(array $args = [])
 * @method Promise getTableVersionsAsync(array $args = [])
 * @method Result getTables(array $args = [])
 * @method Promise getTablesAsync(array $args = [])
 * @method Result getTags(array $args = [])
 * @method Promise getTagsAsync(array $args = [])
 * @method Result getTrigger(array $args = [])
 * @method Promise getTriggerAsync(array $args = [])
 * @method Result getTriggers(array $args = [])
 * @method Promise getTriggersAsync(array $args = [])
 * @method Result getUnfilteredPartitionMetadata(array $args = [])
 * @method Promise getUnfilteredPartitionMetadataAsync(array $args = [])
 * @method Result getUnfilteredPartitionsMetadata(array $args = [])
 * @method Promise getUnfilteredPartitionsMetadataAsync(array $args = [])
 * @method Result getUnfilteredTableMetadata(array $args = [])
 * @method Promise getUnfilteredTableMetadataAsync(array $args = [])
 * @method Result getUserDefinedFunction(array $args = [])
 * @method Promise getUserDefinedFunctionAsync(array $args = [])
 * @method Result getUserDefinedFunctions(array $args = [])
 * @method Promise getUserDefinedFunctionsAsync(array $args = [])
 * @method Result getWorkflow(array $args = [])
 * @method Promise getWorkflowAsync(array $args = [])
 * @method Result getWorkflowRun(array $args = [])
 * @method Promise getWorkflowRunAsync(array $args = [])
 * @method Result getWorkflowRunProperties(array $args = [])
 * @method Promise getWorkflowRunPropertiesAsync(array $args = [])
 * @method Result getWorkflowRuns(array $args = [])
 * @method Promise getWorkflowRunsAsync(array $args = [])
 * @method Result importCatalogToGlue(array $args = [])
 * @method Promise importCatalogToGlueAsync(array $args = [])
 * @method Result listBlueprints(array $args = [])
 * @method Promise listBlueprintsAsync(array $args = [])
 * @method Result listColumnStatisticsTaskRuns(array $args = [])
 * @method Promise listColumnStatisticsTaskRunsAsync(array $args = [])
 * @method Result listCrawlers(array $args = [])
 * @method Promise listCrawlersAsync(array $args = [])
 * @method Result listCrawls(array $args = [])
 * @method Promise listCrawlsAsync(array $args = [])
 * @method Result listCustomEntityTypes(array $args = [])
 * @method Promise listCustomEntityTypesAsync(array $args = [])
 * @method Result listDataQualityResults(array $args = [])
 * @method Promise listDataQualityResultsAsync(array $args = [])
 * @method Result listDataQualityRuleRecommendationRuns(array $args = [])
 * @method Promise listDataQualityRuleRecommendationRunsAsync(array $args = [])
 * @method Result listDataQualityRulesetEvaluationRuns(array $args = [])
 * @method Promise listDataQualityRulesetEvaluationRunsAsync(array $args = [])
 * @method Result listDataQualityRulesets(array $args = [])
 * @method Promise listDataQualityRulesetsAsync(array $args = [])
 * @method Result listDevEndpoints(array $args = [])
 * @method Promise listDevEndpointsAsync(array $args = [])
 * @method Result listJobs(array $args = [])
 * @method Promise listJobsAsync(array $args = [])
 * @method Result listMLTransforms(array $args = [])
 * @method Promise listMLTransformsAsync(array $args = [])
 * @method Result listRegistries(array $args = [])
 * @method Promise listRegistriesAsync(array $args = [])
 * @method Result listSchemaVersions(array $args = [])
 * @method Promise listSchemaVersionsAsync(array $args = [])
 * @method Result listSchemas(array $args = [])
 * @method Promise listSchemasAsync(array $args = [])
 * @method Result listSessions(array $args = [])
 * @method Promise listSessionsAsync(array $args = [])
 * @method Result listStatements(array $args = [])
 * @method Promise listStatementsAsync(array $args = [])
 * @method Result listTableOptimizerRuns(array $args = [])
 * @method Promise listTableOptimizerRunsAsync(array $args = [])
 * @method Result listTriggers(array $args = [])
 * @method Promise listTriggersAsync(array $args = [])
 * @method Result listWorkflows(array $args = [])
 * @method Promise listWorkflowsAsync(array $args = [])
 * @method Result putDataCatalogEncryptionSettings(array $args = [])
 * @method Promise putDataCatalogEncryptionSettingsAsync(array $args = [])
 * @method Result putResourcePolicy(array $args = [])
 * @method Promise putResourcePolicyAsync(array $args = [])
 * @method Result putSchemaVersionMetadata(array $args = [])
 * @method Promise putSchemaVersionMetadataAsync(array $args = [])
 * @method Result putWorkflowRunProperties(array $args = [])
 * @method Promise putWorkflowRunPropertiesAsync(array $args = [])
 * @method Result querySchemaVersionMetadata(array $args = [])
 * @method Promise querySchemaVersionMetadataAsync(array $args = [])
 * @method Result registerSchemaVersion(array $args = [])
 * @method Promise registerSchemaVersionAsync(array $args = [])
 * @method Result removeSchemaVersionMetadata(array $args = [])
 * @method Promise removeSchemaVersionMetadataAsync(array $args = [])
 * @method Result resetJobBookmark(array $args = [])
 * @method Promise resetJobBookmarkAsync(array $args = [])
 * @method Result resumeWorkflowRun(array $args = [])
 * @method Promise resumeWorkflowRunAsync(array $args = [])
 * @method Result runStatement(array $args = [])
 * @method Promise runStatementAsync(array $args = [])
 * @method Result searchTables(array $args = [])
 * @method Promise searchTablesAsync(array $args = [])
 * @method Result startBlueprintRun(array $args = [])
 * @method Promise startBlueprintRunAsync(array $args = [])
 * @method Result startColumnStatisticsTaskRun(array $args = [])
 * @method Promise startColumnStatisticsTaskRunAsync(array $args = [])
 * @method Result startCrawler(array $args = [])
 * @method Promise startCrawlerAsync(array $args = [])
 * @method Result startCrawlerSchedule(array $args = [])
 * @method Promise startCrawlerScheduleAsync(array $args = [])
 * @method Result startDataQualityRuleRecommendationRun(array $args = [])
 * @method Promise startDataQualityRuleRecommendationRunAsync(array $args = [])
 * @method Result startDataQualityRulesetEvaluationRun(array $args = [])
 * @method Promise startDataQualityRulesetEvaluationRunAsync(array $args = [])
 * @method Result startExportLabelsTaskRun(array $args = [])
 * @method Promise startExportLabelsTaskRunAsync(array $args = [])
 * @method Result startImportLabelsTaskRun(array $args = [])
 * @method Promise startImportLabelsTaskRunAsync(array $args = [])
 * @method Result startJobRun(array $args = [])
 * @method Promise startJobRunAsync(array $args = [])
 * @method Result startMLEvaluationTaskRun(array $args = [])
 * @method Promise startMLEvaluationTaskRunAsync(array $args = [])
 * @method Result startMLLabelingSetGenerationTaskRun(array $args = [])
 * @method Promise startMLLabelingSetGenerationTaskRunAsync(array $args = [])
 * @method Result startTrigger(array $args = [])
 * @method Promise startTriggerAsync(array $args = [])
 * @method Result startWorkflowRun(array $args = [])
 * @method Promise startWorkflowRunAsync(array $args = [])
 * @method Result stopColumnStatisticsTaskRun(array $args = [])
 * @method Promise stopColumnStatisticsTaskRunAsync(array $args = [])
 * @method Result stopCrawler(array $args = [])
 * @method Promise stopCrawlerAsync(array $args = [])
 * @method Result stopCrawlerSchedule(array $args = [])
 * @method Promise stopCrawlerScheduleAsync(array $args = [])
 * @method Result stopSession(array $args = [])
 * @method Promise stopSessionAsync(array $args = [])
 * @method Result stopTrigger(array $args = [])
 * @method Promise stopTriggerAsync(array $args = [])
 * @method Result stopWorkflowRun(array $args = [])
 * @method Promise stopWorkflowRunAsync(array $args = [])
 * @method Result tagResource(array $args = [])
 * @method Promise tagResourceAsync(array $args = [])
 * @method Result untagResource(array $args = [])
 * @method Promise untagResourceAsync(array $args = [])
 * @method Result updateBlueprint(array $args = [])
 * @method Promise updateBlueprintAsync(array $args = [])
 * @method Result updateClassifier(array $args = [])
 * @method Promise updateClassifierAsync(array $args = [])
 * @method Result updateColumnStatisticsForPartition(array $args = [])
 * @method Promise updateColumnStatisticsForPartitionAsync(array $args = [])
 * @method Result updateColumnStatisticsForTable(array $args = [])
 * @method Promise updateColumnStatisticsForTableAsync(array $args = [])
 * @method Result updateConnection(array $args = [])
 * @method Promise updateConnectionAsync(array $args = [])
 * @method Result updateCrawler(array $args = [])
 * @method Promise updateCrawlerAsync(array $args = [])
 * @method Result updateCrawlerSchedule(array $args = [])
 * @method Promise updateCrawlerScheduleAsync(array $args = [])
 * @method Result updateDataQualityRuleset(array $args = [])
 * @method Promise updateDataQualityRulesetAsync(array $args = [])
 * @method Result updateDatabase(array $args = [])
 * @method Promise updateDatabaseAsync(array $args = [])
 * @method Result updateDevEndpoint(array $args = [])
 * @method Promise updateDevEndpointAsync(array $args = [])
 * @method Result updateJob(array $args = [])
 * @method Promise updateJobAsync(array $args = [])
 * @method Result updateJobFromSourceControl(array $args = [])
 * @method Promise updateJobFromSourceControlAsync(array $args = [])
 * @method Result updateMLTransform(array $args = [])
 * @method Promise updateMLTransformAsync(array $args = [])
 * @method Result updatePartition(array $args = [])
 * @method Promise updatePartitionAsync(array $args = [])
 * @method Result updateRegistry(array $args = [])
 * @method Promise updateRegistryAsync(array $args = [])
 * @method Result updateSchema(array $args = [])
 * @method Promise updateSchemaAsync(array $args = [])
 * @method Result updateSourceControlFromJob(array $args = [])
 * @method Promise updateSourceControlFromJobAsync(array $args = [])
 * @method Result updateTable(array $args = [])
 * @method Promise updateTableAsync(array $args = [])
 * @method Result updateTableOptimizer(array $args = [])
 * @method Promise updateTableOptimizerAsync(array $args = [])
 * @method Result updateTrigger(array $args = [])
 * @method Promise updateTriggerAsync(array $args = [])
 * @method Result updateUserDefinedFunction(array $args = [])
 * @method Promise updateUserDefinedFunctionAsync(array $args = [])
 * @method Result updateWorkflow(array $args = [])
 * @method Promise updateWorkflowAsync(array $args = [])
 */
class GlueClient extends AwsClient {}
